@page "/instructor-repositorio"
@layout InstructorLayout
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Graph
@using System.Net.Http.Headers
@using System.Text.Json
@inject GraphServiceClient GraphClient
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IConfiguration Configuration

<PageTitle>Repositorio</PageTitle>

<h1 class="mb-4">Subir Archivos a Sharepoint</h1>

<AuthorizeView>
    <NotAuthorized>
        <div class="alert alert-warning">
            Debe autenticarse para subir archivos.
        </div>
        <p>
            Haga clic en <a href="authentication/login">Iniciar sesión</a> para autenticarse y subir archivos al sitio de SharePoint.
        </p>
    </NotAuthorized>

    <Authorized>
        <div class="mb-3">
            <InputFile OnChange="HandleSelected" accept=".pdf,.docx,.xlsx,.jpg,.png,.txt" class="form-control" />
        </div>
        <button class="btn btn-primary" @onclick="UploadFile">Subir Archivo</button>
        @if (uploadResult != null)
        {
            <div class="mt-3 alert alert-info">
                Resultado de la carga: @uploadResult
            </div>
        }



        @code {
        private IBrowserFile? selectedFile;
        private string? uploadResult;

        // Valores crudos (obtén estos valores de tu portal de SharePoint)
        private readonly string siteId = "2c055a57-fd85-4445-a328-4e5b9f808509";
        private readonly string driveId = "b!V1oFLIX9RUSjKE5bn4CFCTDZfKL3IlNNsZjxGgTYuBx21IJJlGZoTbfNA0z2TVQy";

        private void HandleSelected(InputFileChangeEventArgs e)
        {
            selectedFile = e.File;
        }

        private async Task UploadFile()
        {
            if (selectedFile != null)
            {
                // Verificar si el usuario está autenticado y redirigir si es necesario
                var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
                if (!user.Identity.IsAuthenticated)
                {
                    var returnUrl = Uri.EscapeDataString(Navigation.ToBaseRelativePath(Navigation.Uri));
                    Navigation.NavigateTo($"authentication/login?returnUrl={returnUrl}");
                    return;
                }
                try
                {
                    var tokenResult = await GetAccessToken();
                    using (var stream = selectedFile.OpenReadStream(3145728)) // Tamaño máximo de 3 MB
                    {
                        var requestUrl = "https://graph.microsoft.com/v1.0/Drives/" + driveId + "/root:/ejemplo/" + selectedFile.Name + ":/content";

                        var request = new HttpRequestMessage(HttpMethod.Put, requestUrl)
                        {
                            Content = new StreamContent(stream)
                        };

                        var contentType = string.IsNullOrWhiteSpace(selectedFile.ContentType)
                        ? "application/octet-stream"
                        : selectedFile.ContentType;
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);
                        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", tokenResult);

                        var response = await Http.SendAsync(request);
                        if (response.IsSuccessStatusCode)
                        {
                            uploadResult = "Archivo subido exitosamente.";
                            await MostrarNotificacion("Archivo subido exitosamente.", "success");
                            selectedFile = null; // Limpia el archivo seleccionado
                        }
                        else
                        {
                            uploadResult = "Error al subir el archivo.";
                            await MostrarNotificacion("Error al subir el archivo.", "error");
                        }
                    }
                }
                catch (Exception ex)
                {
                    await MostrarNotificacion($"Error al subir el archivo: {ex.Message}", "error");
                }
            }
            else
            {
                await MostrarNotificacion("No se ha seleccionado ningún archivo.", "warning");
            }
        }

        private async Task<string> GetAccessToken()
        {
            try
            {
                var tokenResult = await Http.GetStringAsync("http://localhost:5117/api/GraphAuth/token");
                if (string.IsNullOrEmpty(tokenResult))
                {
                    throw new Exception("No se pudo obtener el token de acceso.");
                }
                return tokenResult;
            }
            catch (HttpRequestException httpEx)
            {
                Console.WriteLine($"Error HTTP al obtener el token: {httpEx.Message}");
                throw new Exception($"Error HTTP al obtener el token: {httpEx.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al obtener el token: {ex.Message}");
                throw new Exception($"Error al obtener el token: {ex.Message}");
            }
        }

        private async Task MostrarNotificacion(string mensaje, string tipo)
        {
            var options = new
            {
                Title = mensaje,
                Icon = tipo,
                ConfirmButtonText = "OK"
            };
            await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
        }

        }
    </Authorized>
</AuthorizeView>
