@page "/instructor-repositorio"
@layout InstructorLayout
@attribute [Authorize(Roles = "Instructor")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Microsoft.Graph
@using System.Net.Http.Headers
@using System.Text.Json
@inject GraphServiceClient GraphClient
@inject NavigationManager Navigation
@inject HttpClient Http

<PageTitle>Repositorio</PageTitle>

<h1>Subir Archivos a Sharepoint</h1>

<AuthorizeView>

    <NotAuthorized>
        <div>Debe autenticarse para subir archivos</div>
        <p>Haga clic en <a href="authentication/login">Iniciar sesión</a> para autenticarse y subir archivos al sitio de SharePoint.</p>
    </NotAuthorized>

    <Authorized>
        <InputFile OnChange="HandleSelected" accept=".pdf,.docx,.xlsx,.jpg,.png, .txt" />
        <button @onclick="UploadFile">Subir Archivo</button>
        @if (uploadResult != null)
        {
            <p>Resultado de la carga: @uploadResult</p>
            Console.WriteLine("INGRESO AL IF UPLOADRESULT");
        }
        @code {


        private IBrowserFile? selectedFile;
        private string? uploadResult;

        // Valores crudos (obtén estos valores de tu portal de SharePoint)

        private readonly string siteId = "2c055a57-fd85-4445-a328-4e5b9f808509";
        private readonly string driveId = "b!V1oFLIX9RUSjKE5bn4CFCTDZfKL3IlNNsZjxGgTYuBx21IJJlGZoTbfNA0z2TVQy";


        private void HandleSelected(InputFileChangeEventArgs e)
        {
            selectedFile = e.File;
        }

        private async Task UploadFile()
        {
            Console.WriteLine("INGRESO AL UploadFile");
            if (selectedFile != null)
            {
                Console.WriteLine($"Archivo seleccionado: {selectedFile.Name}");
                try
                {
                    var tokenResult = await GetAccessToken();
                    using (var stream = selectedFile.OpenReadStream())
                    {
                        Console.WriteLine("INGRESO AL OpenReadStream");
                        var requestUrl = "https://graph.microsoft.com/v1.0/Drives/" + driveId + "/root:/ejemplo/" + selectedFile.Name + ":/content";
                        Console.WriteLine($"REQUEST URL: {requestUrl}");

                        var request = new HttpRequestMessage(HttpMethod.Put, requestUrl)
                        {
                            Content = new StreamContent(stream)
                        };

                        var contentType = string.IsNullOrWhiteSpace(selectedFile.ContentType)
                        ? "application/octet-stream"
                        : selectedFile.ContentType;
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);
                        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", tokenResult);

                        var response = await Http.SendAsync(request);
                        response.EnsureSuccessStatusCode();
                        uploadResult = "Archivo subido exitosamente.";
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error al subir el archivo: {ex.Message}");
                    uploadResult = $"Error al subir el archivo: {ex.Message}";
                }
            }
            else
            {
                Console.WriteLine("No se ha seleccionado ningún archivo.");
            }
        }

        private async Task<string> GetAccessToken()
        {
            Console.WriteLine("INGRESO AL GETACCESTOKEN");
            try
            {
                var tokenResult = await Http.GetStringAsync("http://localhost:5117/auth/token");
                Console.WriteLine($"Respuesta del servidor: {tokenResult}");

                if (string.IsNullOrEmpty(tokenResult))
                {
                    throw new Exception("Failed to obtain access token: token result is null or empty.");
                }

                Console.WriteLine($"Token de Autorización: {tokenResult}");
                return tokenResult;
            }
            catch (HttpRequestException httpEx)
            {
                Console.WriteLine($"Error HTTP al obtener el token: {httpEx.Message}");
                throw new Exception($"Error HTTP al obtener el token: {httpEx.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al obtener el token: {ex.Message}");
                throw new Exception($"Error al obtener el token: {ex.Message}");
            }
            Console.WriteLine("INGRESO AL GETACCESTOKEN");
            try
            {
                var tokenResult = await Http.GetStringAsync("http://localhost:5117/auth/token");
                Console.WriteLine($"Respuesta del servidor: {tokenResult}");

                if (string.IsNullOrEmpty(tokenResult))
                {
                    throw new Exception("Failed to obtain access token: token result is null or empty.");
                }

                Console.WriteLine($"Token de Autorización: {tokenResult}");
                return tokenResult;
            }
            catch (HttpRequestException httpEx)
            {
                Console.WriteLine($"Error HTTP al obtener el token: {httpEx.Message}");
                throw new Exception($"Error HTTP al obtener el token: {httpEx.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al obtener el token: {ex.Message}");
                throw new Exception($"Error al obtener el token: {ex.Message}");
            }
        }
        }
    </Authorized>
</AuthorizeView>
