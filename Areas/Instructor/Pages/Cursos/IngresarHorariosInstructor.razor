@page "/ingresar-horarios-instructor/{cursoId:int}/{periodoId:int}"
@layout InstructorLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime Js

<h3>Ingresar Horarios Preferentes</h3>

@if (!string.IsNullOrEmpty(mensajeRegistro))
{
    <div class="alert alert-info">@mensajeRegistro</div>
}

<EditForm Model="@horarios" OnValidSubmit="RegistrarHorarios">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Día de la Semana:</label>
        <select @bind="nuevoHorario.dia_semana" class="form-control">
            <option value="">Seleccione un día</option>
            <option value="Lunes">Lunes</option>
            <option value="Martes">Martes</option>
            <option value="Miércoles">Miércoles</option>
            <option value="Jueves">Jueves</option>
            <option value="Viernes">Viernes</option>
        </select>
    </div>

    <div class="form-group">
        <label for="horaInicio">Hora de Inicio:</label>
        <input type="time" value="@(new DateTime(nuevoHorario.hora_inicio.Ticks).ToString("HH:mm"))" @oninput="e => nuevoHorario.hora_inicio = TimeSpan.Parse(e.Value.ToString())" class="form-control mr-2" />
    </div>
    <div class="form-group">
        <label for="horaFin">Hora de Fin:</label>
        <input type="time" value="@(new DateTime(nuevoHorario.hora_fin.Ticks).ToString("HH:mm"))" @oninput="e => nuevoHorario.hora_fin = TimeSpan.Parse(e.Value.ToString())" class="form-control mr-2" />
    </div>
    <button type="button" class="btn btn-primary" @onclick="AgregarHorario">Agregar Horario</button>

    <div>
        <h4>Horarios Preferentes</h4>
        <ul>
            @foreach (var horario in horarios)
            {
                <li>@horario.dia_semana: @horario.hora_inicio - @horario.hora_fin <button @onclick="() => EliminarHorario(horario)" class="btn btn-danger btn-sm">Eliminar</button></li>
            }
        </ul>
    </div>

    <button type="submit" class="btn btn-success">Registrar Horarios</button>
</EditForm>

@code {
    [Parameter] public int cursoId { get; set; }
    [Parameter] public int periodoId { get; set; }

    private List<HorarioPreferenteInstructor> horarios = new List<HorarioPreferenteInstructor>();
    private HorarioPreferenteInstructor nuevoHorario = new HorarioPreferenteInstructor();
    private int instructorId;
    private string mensajeRegistro;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var idInstructorString = await Js.InvokeAsync<string>("localStorage.getItem", "IdInstructor");
            Console.WriteLine($"IdInstructor string from local storage: {idInstructorString}");
            if (int.TryParse(idInstructorString, out int idInstructor))
            {
                instructorId = idInstructor;
                Console.WriteLine($"ID INSTRUCTOR: {instructorId}");
            }
            else
            {
                Console.WriteLine("No se pudo obtener el ID del instructor");
                instructorId = 0; // o algún valor por defecto
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener el ID del instructor del local storage: {ex.Message}");
            instructorId = 0; // o algún valor por defecto
        }
    }

    private async Task RegistrarHorarios()
    {
        var registroInstructor = new RegistrarHorarioInstructor
            {
                id_instructor = instructorId,
                id_curso = cursoId,
                id_periodo = periodoId,
                horarios = horarios
            };

        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/Instructor/RegistrarHorario", registroInstructor);

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            if (responseContent == "Instructor registrado previamente")
            {
                mensajeRegistro = "Instructor registrado previamente";
                await sweetAletNotify(mensajeRegistro, "info");
            }
            else
            {
                mensajeRegistro = "Horarios registrados exitosamente";
                await sweetAletNotify(mensajeRegistro, "success");
            }
            Navigation.NavigateTo("/cursos-disponibles-instructor");
        }
        else
        {
            await sweetAletNotify("Error al registrar horarios", "error");
            Console.WriteLine("Error al registrar horarios");
        }
    }

    private void AgregarHorario()
    {
        horarios.Add(nuevoHorario);
        nuevoHorario = new HorarioPreferenteInstructor();
    }

    private void EliminarHorario(HorarioPreferenteInstructor horario)
    {
        horarios.Remove(horario);
    }

    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await Js.InvokeVoidAsync("FireSweetAlert", options);
    }
}
