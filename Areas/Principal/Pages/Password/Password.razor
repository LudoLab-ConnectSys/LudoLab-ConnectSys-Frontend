@page "/password"
@inject HttpClient Http
@inject IJSRuntime Js
@inject NavigationManager Navigation

<style>
    html, body {
        height: 100%;
        margin: 0;
    }

    body::before {
        content: '';
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: url('img/fondo.jpg') no-repeat center center fixed;
        background-size: cover;
        filter: brightness(0.6) blur(5px);
        z-index: -1;
    }
</style>

<div class="container d-flex flex-column align-items-center justify-content-start">
    <div class="content-overlay shadow-box mb-4 mt-5">
        <h1 class="mb-4 text-center">Generar nueva contraseña</h1>
        <p>Como es la primera vez usando el sistema o está cambiando su contraseña, deberá generar una contraseña exclusiva para su uso dentro del sistema.</p>
        <EditForm Model="@_passwordRequest" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator/>

            <div class="mb-3">
                <label for="newPassword" class="form-label">Nueva contraseña</label>
                <div class="input-group">
                    <InputText type="@passwordInputType" class="form-control" id="newPassword" @bind-Value="_passwordRequest.NewPassword"/>
                </div>
                <ValidationMessage For="@(() => _passwordRequest.NewPassword)"/>
            </div>

            <div class="mb-3">
                <label for="confirmPassword" class="form-label">Confirmar nueva contraseña</label>
                <div class="input-group">
                    <InputText type="@passwordInputType" class="form-control" id="confirmPassword" @bind-Value="_passwordRequest.ConfirmPassword"/>
                </div>
                <ValidationMessage For="@(() => _passwordRequest.ConfirmPassword)"/>
            </div>

            <div class="form-check mb-3">
                <input class="form-check-input" type="checkbox" id="showPassword" @onchange="TogglePasswordVisibility">
                <label class="form-check-label" for="showPassword">
                    Mostrar contraseñas
                </label>
            </div>

            <div class="mb-3">
                <h5>Políticas para la contraseña:</h5>
                <ul>
                    <li>Debe tener al menos 8 caracteres</li>
                    <li>Debe contener al menos una letra mayúscula</li>
                    <li>Debe contener al menos una letra minúscula</li>
                    <li>Debe contener al menos un número</li>
                    <li>Debe contener al menos un carácter especial (e.g., @@, #, $, %)</li>
                </ul>
            </div>

            <button type="submit" class="btn btn-primary w-100" style="background-color: #F28D1E; border-color: #F28D1E;">Enviar</button>
        </EditForm>
    </div>
</div>

@code {
    private PasswordRequest _passwordRequest = new PasswordRequest();
    private string passwordInputType = "password";

    private async Task HandleValidSubmit()
    {
        // Obtener userId desde el localStorage
        var userId = await Js.InvokeAsync<string>("localStorage.getItem", "IdUsuario");

        if (string.IsNullOrEmpty(userId))
        {
            await SweetAlertNotify("Error al obtener el ID de usuario", "error");
            return;
        }

        // Realizar la solicitud POST
        var response = await Http.PostAsJsonAsync($"http://localhost:5200/password/changepassword?userId={userId}", _passwordRequest.NewPassword);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ResponseMessage>();
            if (result != null && result.Message.Contains("exitosa"))
            {
                await SweetAlertNotify("Contraseña guardada exitosamente", "success");

                // Redirigir al usuario a la página de login
                Navigation.NavigateTo("/login");
            }
            else
            {
                await SweetAlertNotify("Error al guardar la contraseña", "error");
            }
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine(error);
            await SweetAlertNotify("Error al guardar la contraseña", "error");
        }
    }

    private async Task SweetAlertNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await Js.InvokeVoidAsync("FireSweetAlert", options);
    }

    private void TogglePasswordVisibility(ChangeEventArgs e)
    {
        if ((bool)e.Value)
        {
            passwordInputType = "text";
        }
        else
        {
            passwordInputType = "password";
        }
    }

    private class ResponseMessage
    {
        public string Message { get; set; }
    }

}