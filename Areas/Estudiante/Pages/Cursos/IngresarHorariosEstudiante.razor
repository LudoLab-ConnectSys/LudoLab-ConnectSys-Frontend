@page "/ingresar-horarios-estudiante/{cursoId:int}/{periodoId:int}"
@layout EstudianteLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime Js

<h3>Ingresar Horarios Preferentes</h3>

@if (!string.IsNullOrEmpty(mensajeRegistro))
{
    <div class="alert alert-info">@mensajeRegistro</div>
}

<EditForm Model="@horarios" OnValidSubmit="RegistrarHorarios">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Día de la Semana:</label>
        <select @bind="nuevoHorario.dia_semana" class="form-control">
            <option value="">Seleccione un día</option>
            <option value="Lunes">Lunes</option>
            <option value="Martes">Martes</option>
            <option value="Miércoles">Miércoles</option>
            <option value="Jueves">Jueves</option>
            <option value="Viernes">Viernes</option>
        </select>
    </div>

    <div class="form-group">
        <label for="horaInicio">Hora de Inicio:</label>
        <input type="time" value="@(new DateTime(nuevoHorario.hora_inicio.Ticks).ToString("HH:mm"))" @oninput="e => nuevoHorario.hora_inicio = TimeSpan.Parse(e.Value.ToString())" class="form-control mr-2" />
    </div>
    <div class="form-group">
        <label for="horaFin">Hora de Fin:</label>
        <input type="time" value="@(new DateTime(nuevoHorario.hora_fin.Ticks).ToString("HH:mm"))" @oninput="e => nuevoHorario.hora_fin = TimeSpan.Parse(e.Value.ToString())" class="form-control mr-2" />
    </div>
    <button type="button" class="btn btn-primary" @onclick="AgregarHorario">Agregar Horario</button>

    <div>
        <h4>Horarios Preferentes</h4>
        <ul>
            @foreach (var horario in horarios)
            {
                <li>@horario.dia_semana: @horario.hora_inicio - @horario.hora_fin <button @onclick="() => EliminarHorario(horario)" class="btn btn-danger btn-sm">Eliminar</button></li>
            }
        </ul>
    </div>

    <button type="submit" class="btn btn-success">Registrar Horarios y Matricular</button>
</EditForm>

@code {
    [Parameter] public int cursoId { get; set; }
    [Parameter] public int periodoId { get; set; }

    private List<HorarioPreferenteEstudiante> horarios = new List<HorarioPreferenteEstudiante>();
    private HorarioPreferenteEstudiante nuevoHorario = new HorarioPreferenteEstudiante();
    private int estudianteId;
    private string mensajeRegistro;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var idEstudianteString = await Js.InvokeAsync<string>("localStorage.getItem", "IdEstudiante");
            if (int.TryParse(idEstudianteString, out int idEstudiante))
            {
                estudianteId = idEstudiante;
            }
            else
            {
                estudianteId = 0; // Valor por defecto o manejo de error
            }
        }
        catch (Exception ex)
        {
            estudianteId = 0; // Valor por defecto o manejo de error
        }
    }

    private async Task RegistrarHorarios()
    {
        var registroEstudiante = new RegistrarHorarioEstudiante
            {
                id_estudiante = estudianteId,
                id_curso = cursoId,
                id_periodo = periodoId,
                horarios = horarios
            };

        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/Estudiante/RegistrarHorarioEstudiante", registroEstudiante);

        if (response.StatusCode == System.Net.HttpStatusCode.Conflict)
        {
            mensajeRegistro = "El estudiante ya está registrado previamente en este curso y periodo.";
            await sweetAletNotify(mensajeRegistro, "info");
        }
        else if (response.IsSuccessStatusCode)
        {
            mensajeRegistro = "Horarios registrados y matrícula realizada exitosamente";
            await sweetAletNotify(mensajeRegistro, "success");
            Navigation.NavigateTo("/cursos-disponibles");
        }
        else
        {
            await sweetAletNotify("Error al registrar horarios y matrícula", "error");
        }
    }

    private void AgregarHorario()
    {
        horarios.Add(nuevoHorario);
        nuevoHorario = new HorarioPreferenteEstudiante();
    }

    private void EliminarHorario(HorarioPreferenteEstudiante horario)
    {
        horarios.Remove(horario);
    }

    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await Js.InvokeVoidAsync("FireSweetAlert", options);
    }
}
