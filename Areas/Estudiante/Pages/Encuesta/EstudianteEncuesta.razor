@page "/encuestas/{EncuestaId:int}"
@layout EstudianteLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal

<div class="encuesta-container">
    <h3 class="titulo-encuesta">@tituloEncuesta</h3>
    @if (isLoading)
    {
        <Spinner />
    }
    @if (!encuestaCompletada)
    {
        @if (preguntasOpciones != null && preguntasOpciones.Any())
        {
            foreach (var pregunta in preguntasOpciones)
            {
                if (!respuestas.ContainsKey(pregunta.IdPregunta))
                {
                    respuestas[pregunta.IdPregunta] = 0; // Asegura que cada pregunta tenga un valor por defecto
                }

                <div class="pregunta-container">
                    <label class="pregunta-label">@pregunta.TextoPregunta</label>
                    <select class="pregunta-select" @bind="respuestas[pregunta.IdPregunta]">
                        <option value="0">Selecciona una opción</option>
                        @foreach (var opcion in pregunta.Opciones)
                        {
                            <option value="@opcion.idOption">@opcion.Texto</option>
                        }
                    </select>
                </div>
            }

            <button class="boton-enviar" @onclick="EnviarRespuestas" disabled="@(preguntasOpciones.Count < 1)">Enviar</button>
        }
        else
        {
            <p class="cargando-texto">Cargando preguntas...</p>
        }


    }
    else
    {
        <h4 class="no-cuestionarios">No tiene cuestionarios pendientes</h4>
    }
</div>

<style>
    .encuesta-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f5f5f5;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .titulo-encuesta {
        color: #007bff;
        margin-bottom: 30px;
        font-size: 24px;
        text-align: center;
    }

    .pregunta-container {
        display: flex;
        flex-direction: column;
        width: 100%;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .pregunta-label {
        font-weight: bold;
        color: #333;
        font-size: 16px;
        margin-bottom: 10px;
    }

    .pregunta-select {
        width: 100%;
        padding: 10px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .boton-enviar {
        background-color: #007bff;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-top: 20px;
        width: 100%;
        text-align: center;
    }

        .boton-enviar:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
        }

        .boton-enviar:hover:not(:disabled) {
            background-color: #0056b3;
        }

    .cargando-texto, .no-cuestionarios {
        text-align: center;
        color: #555;
        font-size: 18px;
        margin-top: 20px;
    }
</style>


@code {
    [Parameter]
    public int EncuestaId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "x9zQmP")]
    public string EncryptedIdEstudiante { get; set; }

    public int Id_Estudiantedes { get; set; }
    private List<PreguntaConOpciones> preguntasOpciones = new List<PreguntaConOpciones>();
    private Dictionary<int, int> respuestas = new Dictionary<int, int>();

    private string tituloEncuesta = "Cargando...";
    private bool isLoading = false;
    private List<Pregunta> preguntas = new List<Pregunta>();
    private bool encuestaCompletada = false;
    private bool BotonEnviarHabilitado = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        StateHasChanged(); 
        try
        {
            if (!string.IsNullOrEmpty(EncryptedIdEstudiante))
            {
                Id_Estudiantedes = Decrypt(EncryptedIdEstudiante);
            }
        }
        catch
        {
            NavigationManager.NavigateTo("./");
        }
        await CargarTituloEncuesta();
        await VerificarEncuestaCompletada(Id_Estudiantedes);
        if (!encuestaCompletada)
        {
            await RecibirPreguntas();
        }
        isLoading = false;
        StateHasChanged();
    }
    private int Decrypt(string encryptedId)
    {
        // Implementa tu lógica de desencriptado aquí
        return int.Parse(System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(encryptedId)));
    }
    private async Task CargarTituloEncuesta()
    {
        try
        {
            tituloEncuesta = await Http.GetStringAsync($"http://localhost:5117/api/Encuesta/getnombreencuesta/{EncuestaId}");
        }
        catch (Exception)
        {
            tituloEncuesta = "Error al cargar el título de la encuesta";
        }
    }

    private async Task VerificarEncuestaCompletada(int idEstudiante)
    {
        //Console.WriteLine($"id est a enviar {idEstudiante}");
        if (idEstudiante <= 0)
        {
            NavigationManager.NavigateTo("./");
        }
        try
        {
            encuestaCompletada = await Http.GetFromJsonAsync<bool>($"http://localhost:5117/api/Encuesta/verificar-respuestas/{EncuestaId}/{idEstudiante}");
        }
        catch (Exception ex)
        {
            // Manejar errores de solicitud
            Console.WriteLine($"Error al verificar encuesta completada: {ex.Message}");
        }
    }

    private async Task RecibirPreguntas()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Llamada a la API para obtener las preguntas junto con sus opciones
            preguntasOpciones = await Http.GetFromJsonAsync<List<PreguntaConOpciones>>($"http://localhost:5117/api/Encuesta/preguntasporID/{EncuestaId}");

            isLoading = false;
            StateHasChanged();

            if (preguntasOpciones == null || !preguntasOpciones.Any())
            {
                Console.WriteLine("No se encontraron preguntas para esta encuesta.");
                return;
            }

            // Inicializar el diccionario de respuestas para cada pregunta
            foreach (var pregunta in preguntasOpciones)
            {
                if (!respuestas.ContainsKey(pregunta.IdPregunta))
                {
                    respuestas[pregunta.IdPregunta] = 0; // Valor por defecto para opciones no seleccionadas
                }

                // Imprimir la pregunta y sus opciones en la consola para depuración
                /*Console.WriteLine($"Pregunta: {pregunta.TextoPregunta}");
                foreach (var opcion in pregunta.Opciones)
                {
                    Console.WriteLine($"\tOpción: {opcion.Texto} (Valor: {opcion.Valor})");
                }*/
            }
        }
        catch (Exception ex)
        {
            // Manejar errores de solicitud
            Console.WriteLine($"Error al recibir preguntas: {ex.Message}");
        }
    }


    private async Task EnviarRespuestas()
    {
        // Verificar si todas las respuestas están completas
        if (respuestas.Values.Any(r => r == 0))
        {
            await sweetAletNotify("Por favor, complete todas las respuestas antes de enviar.", "warning");
            return; // Termina la ejecución de la función si hay respuestas incompletas
        }

        var options = new
        {
            Title = "¿Desea enviar sus respuestas?",
            Icon = "question",
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "No"
        };

        var result = await JSRuntime.InvokeAsync<bool>("FireSweetAlertConfirm", options);

        if (!result)
        {
            return; // Termina la ejecución de la función si el usuario selecciona "No"
        }


        // Mapear las respuestas a RespuestaDto
        var respuestasEnviar = respuestas.Select(r => new RespuestaDto
            {
                id_estudiante = Id_Estudiantedes,
                id_pregunta = r.Key,
                id_opcion = r.Value
            }).ToList();
        // Imprimir lo que se va a enviar al backend
        //var json = System.Text.Json.JsonSerializer.Serialize(respuestasEnviar);
        //Console.WriteLine(json);

        try
        {
            // Enviar las respuestas al back-end
            isLoading = true;
            StateHasChanged();
            await Http.PostAsJsonAsync("http://localhost:5117/api/Encuesta/respuestas", respuestasEnviar);
            isLoading = false;
            StateHasChanged();
            await sweetAletNotify("¡Respuestas registradas exitosamente!", "success");
            NavigationManager.NavigateTo("/grupos-del-estudiante");
        }
        catch (Exception ex)
        {
            await sweetAletNotify($"Error al guardar respuestas: {ex.Message}", "error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }

    public class RespuestaDto
    {
        public int id_estudiante { get; set; }  // ID del estudiante que está respondiendo
        public int id_pregunta { get; set; }    // ID de la pregunta que se está respondiendo
        public int id_opcion { get; set; }      // ID de la opción seleccionada
    }

    public class OpcionDto
    {
        public int idOption { get; set; }
        public string Texto { get; set; }
        public int Valor { get; set; }
    }

    public class PreguntaConOpciones
    {
        public int IdPregunta { get; set; }
        public string TextoPregunta { get; set; }
        public List<OpcionDto> Opciones { get; set; }
    }
}
