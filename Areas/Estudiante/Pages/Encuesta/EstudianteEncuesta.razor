@page "/encuestas/{EncuestaId:int}"
@layout EstudianteLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject SweetAlertService Swal

<h3>Encuesta</h3>
@if (isLoading)
{
    <Spinner />
}
@if (!encuestaCompletada)
{
    @if (preguntas != null)
    {
        @foreach (var pregunta in preguntas)
        {
            <div class="pregunta-container">
                <label class="pregunta-label">@pregunta.texto_pregunta</label>
                <input type="text" class="pregunta-input" @bind="respuestas[pregunta.id_pregunta]" />
            </div>
        }
        <button class="boton-enviar" @onclick="EnviarRespuestas">Enviar</button>
        
    }
    else
    {
        <p>Cargando preguntas...</p>
    }
    <!---->
}
else
{
    <h4>No tiene cuetionarios pendientes</h4>
    <!--  //@sweetAletNotify("Ya ha completado el cuestionario", "info")-->
}

<style>
    .pregunta-container {
        margin-bottom: 20px;
    }

    .pregunta-label {
        font-weight: bold;
        color: #333;
        font-size: 16px;
    }

    .pregunta-input {
        width: 100%;
        padding: 8px;
        font-size: 14px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .boton-enviar {
        background-color: #007bff;
        color: #fff;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
</style>

@code {
    [Parameter]
    public int EncuestaId { get; set; }

    private bool isLoading = false;
    private int idEstudiante;
    private List<Pregunta> preguntas = new List<Pregunta>();
    private Dictionary<int, string> respuestas = new Dictionary<int, string>();
    private bool encuestaCompletada = false;
    private bool BotonEnviarHabilitado = false;

    protected override async Task OnInitializedAsync()
    {
        int initidEstudiante = 7; // Esto debería obtenerse dinámicamente según tu lógica
        idEstudiante = initidEstudiante;
        await VerificarEncuestaCompletada(idEstudiante);
        if (!encuestaCompletada)
        {
            await RecibirPreguntas();
        }
    }

    private async Task VerificarEncuestaCompletada(int idEstudiante)
    {
        try
        {
            encuestaCompletada = await Http.GetFromJsonAsync<bool>($"http://localhost:5117/api/Encuesta/verificar-respuestas/{EncuestaId}/{idEstudiante}");
        }
        catch (Exception ex)
        {
            // Manejar errores de solicitud
            Console.WriteLine($"Error al verificar encuesta completada: {ex.Message}");
        }
    }

    private async Task RecibirPreguntas()
    {
        try
        {
            preguntas = await Http.GetFromJsonAsync<List<Pregunta>>($"http://localhost:5117/api/Encuesta/preguntas/{EncuestaId}");
            // Inicializar el diccionario de respuestas para cada pregunta
            foreach (var pregunta in preguntas)
            {
                if (!respuestas.ContainsKey(pregunta.id_pregunta))
                {
                    respuestas[pregunta.id_pregunta] = string.Empty;
                }
            }
        }
        catch (Exception ex)
        {
            // Manejar errores de solicitud
            Console.WriteLine($"Error al recibir preguntas: {ex.Message}");
        }
    }

    private async Task EnviarRespuestas()
    {
        var options = new
        {
            Title = "¿Desea enviar sus respuestas?",
            Icon = "question",
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "No"
        };
        var result = await JSRuntime.InvokeAsync<bool>("FireSweetAlertConfirm", options);

        if (!result)
        {
            return; // Termina la ejecución de la función si el usuario selecciona "No"
        }
        isLoading = true;
        StateHasChanged();
        // Espera de 5 segundos para verificar si el Spinner aparece
        //await Task.Delay(5000);
        foreach (var pregunta in respuestas)
        {
            Console.WriteLine($"pos {pregunta.Key}, respuesta {pregunta.Value}");
        }
        var respuestasEnviar = respuestas.Select(r => new RespuestaDto
            {
                id_estudiante = idEstudiante,
                id_pregunta = r.Key,
                texto_respuesta = r.Value
            }).ToList();

        try
        {
            isLoading = false;
            StateHasChanged();
            await Http.PostAsJsonAsync("http://localhost:5117/api/Encuesta/respuestas", respuestasEnviar);
            await sweetAletNotify("¡Respuestas registradas exitosamente!", "info");
            //await JSRuntime.InvokeVoidAsync("refreshPage");

        }
        catch (Exception ex)
        {
            await sweetAletNotify("Error al guardar respuestas", "error");
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }

    public class RespuestaDto
    {
        public int id_estudiante { get; set; }
        public int id_pregunta { get; set; }
        public string texto_respuesta { get; set; }
    }
}
