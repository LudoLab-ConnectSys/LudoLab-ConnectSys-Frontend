<!-- EncuestasList.razor -->
@page "/encuestas"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject SweetAlertService Swal
@layout EstudianteLayout
@inject IConfiguration Configuration

<h3 class="titulo-lista">Lista de Encuestas</h3>

@if (isLoading)
{
    <Spinner />
}
<div class="encuesta-list">
    <div class="encuesta-grid">
        @foreach (var encuesta in encuestas)
        {
            <div class="encuesta-card" @onclick="() => VerDetalles(encuesta.id_encuesta)">
                <h4 class="encuesta-titulo">@encuesta.titulo</h4>
                <p class="encuesta-fecha">Fecha de Creación: @encuesta.fecha_creacion.ToShortDateString()</p>
            </div>
        }
    </div>
</div>
<style>
    .titulo-lista {
        text-align: center;
        color: #007bff;
        margin-bottom: 30px;
        font-size: 24px;
        font-weight: bold;
    }

    .encuesta-list {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .encuesta-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }

    .encuesta-card {
        background-color: #ffffff;
        border: none;
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        cursor: pointer;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

        .encuesta-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        }

    .encuesta-titulo {
        margin-bottom: 10px;
        font-size: 18px;
        color: #333;
        font-weight: 600;
    }

    .encuesta-fecha {
        font-size: 14px;
        color: #666;
    }
</style>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "yhdfgyh")]
    public string IdStudent { get; set; }

    private bool isLoading = false;
    List<Encuesta> encuestas = new List<Encuesta>();

    private string _baseUrl;

    protected override async Task OnInitializedAsync()
    {
        _baseUrl = Configuration["BaseUrl"];
        isLoading = true;
        StateHasChanged();

        try
        {
            encuestas = await httpClient.GetFromJsonAsync<List<Encuesta>>($"{_baseUrl}/api/Encuesta/GetEncuesta");
        }
        catch (Exception ex)
        {
            await sweetAletNotify("Error al obtener las encuestas", "error");
            isLoading = false;
            StateHasChanged();
            return;
        }

        isLoading = false;
        StateHasChanged();
    }
    private string Encrypt(int id)
    {
        // Implementa tu lógica de cifrado aquí
        return Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(id.ToString()));
    }

    void VerDetalles(int encuestaId)
    {
        //string encryptedId = Encrypt(IdStudent);
        NavigationManager.NavigateTo($"/encuestas/{encuestaId}?x9zQmP={IdStudent}");
    }
    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }
}