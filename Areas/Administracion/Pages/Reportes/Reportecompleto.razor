@inject NavigationManager NavigationManager
@page "/generar-reportecompleto"
@layout AdminLayout
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@inject HttpClient Http
@using ClosedXML.Excel;
@using CurrieTechnologies.Razor.SweetAlert2
@inject SweetAlertService Swal

<h2 class="titulo-resultado">Generar reportes completos de curso</h2>
<!--<h3 class="titulo-resultado">Lista de Cursos</h3>-->
@if (isLoading)
{
    <SpinnerPage />
}

<EditForm Model="newCurso">
    <div class="contenedor">
        <label for="nombrePeriodo" class="label">Nombre del Periodo:</label>
        <select id="nombrePeriodo" @bind="selectedPeriodo" class="select">
            <option value="">Seleccione un periodo</option>
            @foreach (var periodo in listaPeriodos)
            {
                <option value="@periodo.id_lista_periodo">@periodo.nombre_periodo</option>
            }
        </select>
    </div>

    <div class="contenedor">
        <label for="nombreCurso" class="label">Nombre del Curso:</label>
        <InputText id="nombreCurso" @bind-Value="@newPeriodocertificate" class="input-text"></InputText>
    </div>

    <div class="contenedor-botones">
        <button @onclick="(() => BuscarPeriodos(selectedPeriodo, newPeriodocertificate))" class="btn btn-primary btn-buscar">Buscar Curso</button>
        <!--<button @onclick="(() => ListaPeriodos())" type="button" class="btn btn-secondary btn-listar">Listar Todos los Cursos</button>-->
    </div>

</EditForm><br/>
<div class="row mb-4">
    <div class="col-md-6">
        <div class="form-group">
            <label for="incluirTutores" class="font-weight-bold">Incluir Tutores:</label>
            <select id="incluirTutores" class="custom-select" @bind="incluirTutores">
                <option value="true">Sí</option>
                <option value="false">No</option>
            </select>
        </div>
    </div>
        
    <div class="col-md-6">
        <div class="form-group">
            <label for="incluirEstudiantes" class="font-weight-bold">Incluir Estudiantes:</label>
            <select id="incluirEstudiantes" class="custom-select" @bind="incluirEstudiantes">
                <option value="true">Sí</option>
                <option value="false">No</option>
            </select>
        </div>
    </div>
</div>


<table class="table table-striped table-resultado">
    <thead>
        <tr>
            <th scope="col">Nombre Periodo</th>
            <th scope="col">Inicio</th>
            <th scope="col">Fin</th>
            <th scope="col">Nombre Curso</th>
            <th scope="col">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var en in Periodos)
        {
            var inputFileId = $"fileInput_{en.id_periodo}";

            <tr>
                <td>@en.nombre_periodo</td>
                <td>@en.fecha_inicio_periodo</td>
                <td>@en.fecha_fin_periodo</td>
                <td>@en.nombre_curso</td>
                <td>
                    <button type="button" class="btn btn-primary" @onclick="(() => GenerarReporte(en.id_periodo, en.nombre_periodo, en.nombre_curso, incluirTutores, incluirEstudiantes))">
                        Reporte
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="d-flex justify-content-between">
    <button @onclick="(() => BuscarPeriodos(selectedPeriodo, newPeriodocertificate, CurrentPage - 1))" class="btn btn-primary" disabled="@(CurrentPage == 1 || isLoading)">Anterior</button>
    <span>Página @CurrentPage de @TotalPages</span>
    <button @onclick="(() => BuscarPeriodos(selectedPeriodo, newPeriodocertificate, CurrentPage + 1))" class="btn btn-primary" disabled="@(CurrentPage == TotalPages || isLoading)">Siguiente</button>
</div

<style>
    .titulo-resultado {
        text-align: center;
        color: #007bff;
        margin-bottom: 30px;
        font-size: 28px;
        font-weight: bold;
    }

    .contenedor {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

    .label {
        flex: 1;
        font-weight: bold;
        color: #333;
    }

    .select, .input-text {
        flex: 2;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
    }

    .contenedor-botones {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .btn-buscar {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-listar {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #6c757d;
        border-color: #6c757d;
    }

    .table-resultado {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

        .table-resultado th, .table-resultado td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table-resultado th {
            background-color: #f8f8f8;
            font-weight: bold;
        }

        .table-resultado td {
            color: #333;
        }

    .modal-title {
        font-size: 22px;
    }

    .info-modal {
        margin-bottom: 15px;
        font-size: 16px;
        color: #333;
    }

.custom-select {
    border: 2px solid #007bff;
    border-radius: 5px;
    padding: 10px;
    background-color: #f8f9fa;
}

.custom-select:focus {
    border-color: #0056b3;
    box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, 0.25);
}
</style>

@code {
    private bool isLoading = false;
    Curso newCurso = new Curso();
    private List<ListaPeriodo> listaPeriodos = [];
    public static List<PeriodoConNombreCurso> Periodos = new List<PeriodoConNombreCurso>();
    private int selectedPeriodo;
    string newPeriodocertificate;
    public static List<UsuarioPeriodo> ListaEstudiantes = new List<UsuarioPeriodo>();
    String nombreCurso;
    String nombrePeriodo;
    private int CurrentPage { get; set; } = 1;// propiedades para paginación
    private int TotalPages { get; set; }
    private int registerNumber { get; set; } = 3;
    //filtros para obtener reporte con filtros
    private string incluirTutores = "false";
    private string incluirEstudiantes = "false";

    protected override async Task OnInitializedAsync()
    {
        await ListaNombresPeriodos();
        await BuscarPeriodos(0, "", 1);
    }


    public async Task BuscarPeriodos(int id_lista_periodo, string nombre_curso, int pageNumber = 1)
    {
        try
        {
            if (pageNumber < 1 || (TotalPages > 0 && pageNumber > TotalPages))
            {
                return;
            }

            isLoading = true;
            StateHasChanged();

            var url = $"http://localhost:5117/api/Periodo/PeriodoByName?id_lista_periodo={id_lista_periodo}&nombre_curso={nombre_curso}&pageNumber={pageNumber}&pageSize={registerNumber}";
            var response = await Http.GetAsync(url);

            isLoading = false;
            StateHasChanged();

            if (response.IsSuccessStatusCode)
            {
                var pagedResult = await response.Content.ReadFromJsonAsync<PagedResult<PeriodoConNombreCurso>>();
                Periodos = pagedResult.Items;
                TotalPages = pagedResult.TotalPages;
                CurrentPage = pagedResult.CurrentPage;

                if (Periodos == null || Periodos.Count == 0)
                {
                    await sweetAletNotify("No se encontraron coincidencias", "info");
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                await sweetAletNotify("No se encontraron coincidencias", "info");
                Periodos = new List<PeriodoConNombreCurso>();
            }
            else
            {
                await sweetAletNotify("Error al buscar los periodos", "error");
            }
        }
        catch (Exception ex)
        {
            // Maneja la excepción, por ejemplo, registrándola o mostrando un mensaje de error
            await sweetAletNotify("Error al buscar los periodos", "error");

            // Puedes asignar Periodos a una lista vacía en caso de error
            Periodos = new List<PeriodoConNombreCurso>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    //FUNCIONES PARA Periodo
    public async Task ListaPeriodos()
    {
        isLoading = true;
        StateHasChanged();
        Periodos = await Http.GetFromJsonAsync<List<PeriodoConNombreCurso>>("http://localhost:5117/api/Periodo");
        isLoading = false;
        StateHasChanged();
    }
    //FUNCIONES PARA Periodo
    public async Task ListaNombresPeriodos()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
        
            // Intenta obtener la lista de periodos
            listaPeriodos = await Http.GetFromJsonAsync<List<ListaPeriodo>>("http://localhost:5117/api/Periodo/getNamePeriodoList");
        }
        catch (Exception ex)
        {
            // Maneja la excepción, por ejemplo, registrándola o mostrando un mensaje de error
            Console.WriteLine($"Error al obtener la lista de periodos: {ex.Message}");
        
            // Puedes asignar listaPeriodos a una lista vacía en caso de error
            listaPeriodos = new List<ListaPeriodo>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task GenerarReporte(int idPeriodo, string nombre_periodo, string nombre_curso, string incluirTutores, string incluirEstudiantes)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Intentar obtener el reporte desde el API
            var reporte = await Http.GetFromJsonAsync<ReporteCursoDTO>($"http://localhost:5117/api/File/GetReporteFilter/{idPeriodo}?incluirTutores={bool.Parse(incluirTutores)}&incluirEstudiantes={bool.Parse(incluirEstudiantes)}");

            isLoading = false;
            StateHasChanged();

            using (var workbook = new XLWorkbook())
            {
                isLoading = true;
                StateHasChanged();

                // Crear la hoja de cálculo y agregar datos
                var worksheet = workbook.Worksheets.Add("Reporte del Curso");

                // Estilo para las celdas con encabezado
                var headerStyle = workbook.Style;
                headerStyle.Font.Bold = true;
                headerStyle.Fill.BackgroundColor = XLColor.LightGray;
                headerStyle.Border.BottomBorder = XLBorderStyleValues.Thin;
                headerStyle.Border.TopBorder = XLBorderStyleValues.Thin;
                headerStyle.Border.LeftBorder = XLBorderStyleValues.Thin;
                headerStyle.Border.RightBorder = XLBorderStyleValues.Thin;

                // Estilo para las celdas de datos
                var dataStyle = workbook.Style;
                dataStyle.Border.BottomBorder = XLBorderStyleValues.Thin;
                dataStyle.Border.TopBorder = XLBorderStyleValues.Thin;
                dataStyle.Border.LeftBorder = XLBorderStyleValues.Thin;
                dataStyle.Border.RightBorder = XLBorderStyleValues.Thin;

                // Agregar datos de periodo y curso
                worksheet.Cell(1, 1).Value = "Periodo";
                worksheet.Cell(1, 2).Value = nombre_periodo;
                worksheet.Range("A1:B1").Style = headerStyle;
                worksheet.Cell(2, 1).Value = "Fecha Inicio";
                worksheet.Cell(2, 2).Value = reporte.Periodo.FechaInicio;
                worksheet.Range("A2:B2").Style = dataStyle;
                worksheet.Cell(3, 1).Value = "Fecha Fin";
                worksheet.Cell(3, 2).Value = reporte.Periodo.FechaFin;
                worksheet.Range("A3:B3").Style = dataStyle;

                worksheet.Cell(5, 1).Value = "Curso";
                worksheet.Cell(5, 2).Value = reporte.Curso.Nombre;
                worksheet.Range("A5:B5").Style = headerStyle;
                worksheet.Cell(6, 1).Value = "Tipo de Curso";
                worksheet.Cell(6, 2).Value = reporte.Curso.Tipo;
                worksheet.Range("A6:B6").Style = dataStyle;
                worksheet.Cell(7, 1).Value = "Horas";
                worksheet.Cell(7, 2).Value = reporte.Curso.Horas;
                worksheet.Range("A7:B7").Style = dataStyle;

                // Agregar datos de grupos
                worksheet.Cell(9, 1).Value = "Grupos";
                worksheet.Range("A9:C9").Merge().Style = headerStyle;
                worksheet.Cell(10, 1).Value = "ID Grupo";
                worksheet.Cell(10, 2).Value = "Nombre Grupo";
                worksheet.Cell(10, 3).Value = "Nombre Instructor";
                worksheet.Range("A10:C10").Style = headerStyle;

                int row = 11;
                foreach (var grupo in reporte.Grupos)
                {
                    worksheet.Cell(row, 1).Value = grupo.Id;
                    worksheet.Cell(row, 2).Value = grupo.Nombre;
                    worksheet.Cell(row, 3).Value = grupo.InstructorNombre;
                    worksheet.Range(row, 1, row, 3).Style = dataStyle;
                    row++;
                }

                // Agregar datos de horarios
                worksheet.Cell(row + 1, 1).Value = "Horarios";
                worksheet.Range(row + 1, 1, row + 1, 5).Merge().Style = headerStyle;
                worksheet.Cell(row + 2, 1).Value = "ID Horario";
                worksheet.Cell(row + 2, 2).Value = "Día de la Semana";
                worksheet.Cell(row + 2, 3).Value = "Hora Inicio";
                worksheet.Cell(row + 2, 4).Value = "Hora Fin";
                worksheet.Range(row + 2, 1, row + 2, 4).Style = headerStyle;

                row += 3;
                foreach (var horario in reporte.Horarios)
                {
                    worksheet.Cell(row, 1).Value = horario.Id;
                    worksheet.Cell(row, 2).Value = horario.DiaSemana;
                    worksheet.Cell(row, 3).Value = horario.HoraInicio.ToString(@"hh\:mm\:ss");
                    worksheet.Cell(row, 4).Value = horario.HoraFin.ToString(@"hh\:mm\:ss");
                    worksheet.Range(row, 1, row, 4).Style = dataStyle;
                    row++;
                }

                // Agregar datos de horas de instructores
                worksheet.Cell(row + 1, 1).Value = "Horas de Instructores";
                worksheet.Range(row + 1, 1, row + 1, 4).Merge().Style = headerStyle;
                worksheet.Cell(row + 2, 1).Value = "ID Horas Instructor";
                worksheet.Cell(row + 2, 2).Value = "Nombre Instructor";
                worksheet.Cell(row + 2, 3).Value = "Horas Ganadas";
                worksheet.Range(row + 2, 1, row + 2, 3).Style = headerStyle;

                row += 3;
                foreach (var horasInstructor in reporte.HorasInstructores)
                {
                    worksheet.Cell(row, 1).Value = horasInstructor.Id;
                    worksheet.Cell(row, 2).Value = horasInstructor.InstructorNombre;
                    worksheet.Cell(row, 3).Value = horasInstructor.HorasGanadas;
                    worksheet.Range(row, 1, row, 3).Style = dataStyle;
                    row++;
                }

                // Agregar datos de instructores si se incluye
                if (bool.Parse(incluirTutores))
                {
                    worksheet.Cell(row + 1, 1).Value = "Instructores";
                    worksheet.Range(row + 1, 1, row + 1, 2).Merge().Style = headerStyle;
                    worksheet.Cell(row + 2, 1).Value = "ID Instructor";
                    worksheet.Cell(row + 2, 2).Value = "Nombre";
                    worksheet.Range(row + 2, 1, row + 2, 2).Style = headerStyle;

                    row += 3;
                    foreach (var instructor in reporte.Instructores)
                    {
                        worksheet.Cell(row, 1).Value = instructor.Id;
                        worksheet.Cell(row, 2).Value = instructor.Nombre;
                        worksheet.Range(row, 1, row, 2).Style = dataStyle;
                        row++;
                    }
                }

                // Agregar datos de estudiantes si se incluye
                if (bool.Parse(incluirEstudiantes))
                {
                    worksheet.Cell(row + 1, 1).Value = "Estudiantes";
                    worksheet.Range(row + 1, 1, row + 1, 5).Merge().Style = headerStyle;
                    worksheet.Cell(row + 2, 1).Value = "ID Estudiante";
                    worksheet.Cell(row + 2, 2).Value = "Tipo de Estudiante";
                    worksheet.Cell(row + 2, 3).Value = "Nombre";
                    worksheet.Cell(row + 2, 4).Value = "Horas Asignadas";
                    worksheet.Range(row + 2, 1, row + 2, 4).Style = headerStyle;

                    row += 3;
                    foreach (var estudiante in reporte.Estudiantes)
                    {
                        worksheet.Cell(row, 1).Value = estudiante.Id;
                        worksheet.Cell(row, 2).Value = estudiante.Tipo;
                        worksheet.Cell(row, 3).Value = estudiante.Nombre;
                        worksheet.Cell(row, 4).Value = estudiante.HorasAsignadas;
                        worksheet.Range(row, 1, row, 4).Style = dataStyle;
                        row++;
                    }
                }

                // Agregar datos de usuarios
                worksheet.Cell(row + 1, 1).Value = "Usuarios";
                worksheet.Range(row + 1, 1, row + 1, 8).Merge().Style = headerStyle;
                worksheet.Cell(row + 2, 1).Value = "ID Usuario";
                worksheet.Cell(row + 2, 2).Value = "Cédula";
                worksheet.Cell(row + 2, 3).Value = "Nombre";
                worksheet.Cell(row + 2, 4).Value = "Apellidos";
                worksheet.Cell(row + 2, 5).Value = "Edad";
                worksheet.Cell(row + 2, 6).Value = "Correo";
                worksheet.Cell(row + 2, 7).Value = "Celular";
                worksheet.Cell(row + 2, 8).Value = "Teléfono";
                worksheet.Range(row + 2, 1, row + 2, 8).Style = headerStyle;

                row += 3;
                foreach (var usuario in reporte.Usuarios)
                {
                    worksheet.Cell(row, 1).Value = usuario.Id;
                    worksheet.Cell(row, 2).Value = usuario.Cedula;
                    worksheet.Cell(row, 3).Value = usuario.Nombre;
                    worksheet.Cell(row, 4).Value = usuario.Apellidos;
                    worksheet.Cell(row, 5).Value = usuario.Edad;
                    worksheet.Cell(row, 6).Value = usuario.Correo;
                    worksheet.Cell(row, 7).Value = usuario.Celular;
                    worksheet.Cell(row, 8).Value = usuario.Telefono;
                    worksheet.Range(row, 1, row, 8).Style = dataStyle;
                    row++;
                }

                isLoading = false;
                StateHasChanged();

                using (var stream = new MemoryStream())
                {
                    isLoading = true;
                    StateHasChanged();
                    workbook.SaveAs(stream);
                    var content = stream.ToArray();
                    var base64 = Convert.ToBase64String(content);

                    var nombreExcel = string.Concat(nombre_curso + "_Reporte_", DateTime.Now.ToString(), ".xlsx");
                    await JSRuntime.InvokeVoidAsync("DescargarExel", nombreExcel, base64);
                    isLoading = false;
                    StateHasChanged();

                }
                    await sweetAletNotify("Reporte descargado exitosamente", "success");
            }
        }
        catch (HttpRequestException httpEx)
        {
            isLoading = false;
            StateHasChanged();
            await sweetAletNotify("Error al obtener el reporte desde el servidor: " + httpEx.Message, "error");
        }
        catch (InvalidOperationException invalidOpEx)
        {
            isLoading = false;
            StateHasChanged();
            await sweetAletNotify("Operación inválida: " + invalidOpEx.Message, "error");
        }
        catch (Exception ex)
        {
            isLoading = false;
            StateHasChanged();
            await sweetAletNotify($"Error al generar el reporte: {ex.Message}", "error");
        }
    }



    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }


    public class ReporteCursoDTO
    {
        public PeriodoDTO Periodo { get; set; }
        public CursoDTO Curso { get; set; }
        public List<GrupoDTO> Grupos { get; set; }
        public List<HorarioDTO> Horarios { get; set; }
        public List<HorasInstructorDTO> HorasInstructores { get; set; }
        public List<InstructorDTO> Instructores { get; set; }
        public List<EstudianteDTO> Estudiantes { get; set; }
        public List<UsuarioDTO> Usuarios { get; set; }
    }

    public class PeriodoDTO
    {
        public int Id { get; set; }
        public string FechaInicio { get; set; }
        public string FechaFin { get; set; }
        public bool Activo { get; set; }
        public string CursoNombre { get; set; }
        public string ListaPeriodoNombre { get; set; }
    }

    public class CursoDTO
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Tipo { get; set; }
        public int Horas { get; set; }
    }

    public class GrupoDTO
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string InstructorNombre { get; set; }
    }

    public class HorarioDTO
    {
        public int Id { get; set; }
        public string DiaSemana { get; set; }
        public TimeSpan HoraInicio { get; set; }
        public TimeSpan HoraFin { get; set; }
    }

    public class HorasInstructorDTO
    {
        public int Id { get; set; }
        public string InstructorNombre { get; set; }
        public int HorasGanadas { get; set; }
    }

    public class InstructorDTO
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
    }

    public class EstudianteDTO
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Tipo { get; set; }
        public int HorasAsignadas { get; set; }
    }

    public class UsuarioDTO
    {
        public int Id { get; set; }
        public string Cedula { get; set; }
        public string Nombre { get; set; }
        public string Apellidos { get; set; }
        public int Edad { get; set; }
        public string Correo { get; set; }
        public string Celular { get; set; }
        public string Telefono { get; set; }
    }
    public class PagedResult<T>
    {
        public List<T> Items { get; set; }
        public int TotalPages { get; set; }
        public int CurrentPage { get; set; }
    }
}
