@page "/estudiantes"
@layout AdminLayout
@attribute [Authorize(Roles = "Administrador")]
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@inject HttpClient Http

<h3>Listado de Estudiantes</h3>

<!-- Filtro por Curso -->
<div class="form-group">
    <label for="cursoSelect">Filtrar por Curso:</label>
    <select id="cursoSelect" class="form-control" @onchange="OnCursoSeleccionadoChange">
        <option value="">Seleccionar Curso</option>
        @foreach (var curso in cursos)
        {
            <option value="@curso.id_curso">@curso.nombre_curso</option>
        }
    </select>
</div>

@if (selectedCurso != 0)
{
    <!-- Filtro por Periodo -->
    <div class="form-group">
        <label for="periodoSelect">Filtrar por Periodo:</label>
        <select id="periodoSelect" class="form-control" @onchange="OnPeriodoSeleccionadoChange">
            <option value="">Seleccionar Periodo</option>
            @foreach (var periodo in periodosFiltrados)
            {
                <option value="@periodo.id_lista_periodo">@periodo.nombre_periodo</option>
            }
        </select>
    </div>
}

<button class="btn btn-success" @onclick="CrearNuevoEstudiante">Añadir Nuevo Estudiante</button>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Edad</th>
            <th>Correo</th>
            <th>Cursos</th>
            <th>Periodos</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var estudiante in estudiantesFiltrados)
        {
            <tr>
                <td>@estudiante.id_estudiante</td>
                <td>@estudiante.nombre_usuario</td>
                <td>@estudiante.apellidos_usuario</td>
                <td>@estudiante.edad_usuario</td>
                <td>@estudiante.correo_usuario</td>
                <td>@string.Join(", ", estudiante.cursos)</td>
                <td>@string.Join(", ", estudiante.periodos)</td>
                <td>
                    <button class="btn btn-info" @onclick="() => VerDetalles(estudiante.id_estudiante)">Ver</button>
                    <button class="btn btn-danger" @onclick="() => EliminarEstudiante(estudiante.id_estudiante)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (!estudiantesFiltrados.Any())
{
    <p>No hay estudiantes disponibles con los filtros seleccionados.</p>
}

@code {
    private List<EstudianteConDetalles> estudiantes = new List<EstudianteConDetalles>();
    private List<EstudianteConDetalles> estudiantesFiltrados = new List<EstudianteConDetalles>();
    private List<ListaPeriodo> periodos = new List<ListaPeriodo>();
    private List<ListaPeriodo> periodosFiltrados = new List<ListaPeriodo>();
    private List<Curso> cursos = new List<Curso>();
    private int selectedPeriodo = 0;
    private int selectedCurso = 0;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        estudiantes = await Http.GetFromJsonAsync<List<EstudianteConDetalles>>("http://localhost:5117/api/Estudiante/Detalles");
        periodos = await Http.GetFromJsonAsync<List<ListaPeriodo>>("http://localhost:5117/api/ListaPeriodo");
        cursos = await Http.GetFromJsonAsync<List<Curso>>("http://localhost:5117/api/Curso");
        estudiantesFiltrados = estudiantes;
    }

    private async Task OnCursoSeleccionadoChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int cursoId))
        {
            selectedCurso = cursoId;
            await CargarPeriodos(cursoId);
        }
        else
        {
            selectedCurso = 0;
            selectedPeriodo = 0; // Reset periodo filter
            periodosFiltrados = new List<ListaPeriodo>();
            FiltrarEstudiantes();
        }
    }

    private async Task CargarPeriodos(int cursoId)
    {
        try
        {
            periodosFiltrados = await Http.GetFromJsonAsync<List<ListaPeriodo>>($"http://localhost:5117/api/Periodo/por-curso/{cursoId}");
            if (!periodosFiltrados.Any())
            {
                errorMessage = "No se encontraron periodos para el curso seleccionado.";
            }
            else
            {
                errorMessage = string.Empty; // Limpia el mensaje de error si se encontraron periodos
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los periodos: {ex.Message}";
        }
    }

    private void OnPeriodoSeleccionadoChange(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();
        if (string.IsNullOrEmpty(selectedValue))
        {
            selectedPeriodo = 0;
        }
        else
        {
            selectedPeriodo = int.Parse(selectedValue);
        }

        FiltrarEstudiantes();
    }

    private void FiltrarEstudiantes()
    {
        estudiantesFiltrados = estudiantes
            .Where(est => (selectedCurso == 0 || est.id_cursos.Contains(selectedCurso)) &&
                          (selectedPeriodo == 0 || est.id_periodos.Contains(selectedPeriodo)))
            .ToList();
    }

    private void VerDetalles(int id)
    {
        NavigationManager.NavigateTo($"/detalle-estudiante/{id}");
    }

    private void CrearNuevoEstudiante()
    {
        NavigationManager.NavigateTo("/matricular-estudiante");
    }

    private async Task EliminarEstudiante(int id)
    {
        var response = await Http.DeleteAsync($"http://localhost:5117/api/Estudiante/{id}");
        if (response.IsSuccessStatusCode)
        {
            estudiantes.RemoveAll(e => e.id_estudiante == id);
            FiltrarEstudiantes();
        }
    }
}
