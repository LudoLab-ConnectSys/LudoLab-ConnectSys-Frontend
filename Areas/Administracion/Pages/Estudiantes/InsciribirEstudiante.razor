@page "/matricular-estudiante"
@layout AdminLayout
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime

<h3 class="text-center my-4">Registrar y Matricular Estudiante</h3>

<EditForm Model="@nuevoUsuario" OnValidSubmit="HandleValidSubmit" class="container">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <!-- Datos del Usuario -->
                    <div class="form-group mb-3">
                        <input type="hidden" id="formIsValid" value="true" />
                        <label for="cedula">Cédula:</label>
                        <InputText id="cedula" class="form-control" @bind-Value="nuevoUsuario.cedula_usuario"
                                   @oninput="ValidarCedula" />
                        <ValidationMessage For="@(() => nuevoUsuario.cedula_usuario)" />
                        <span class="text-danger" id="cedulaError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="nombre">Nombre:</label>
                        <InputText id="nombre" class="form-control" @bind-Value="nuevoUsuario.nombre_usuario"
                                   @oninput="ValidarNombre" />
                        <ValidationMessage For="@(() => nuevoUsuario.nombre_usuario)" />
                        <span class="text-danger" id="nombreError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="apellidos">Apellidos:</label>
                        <InputText id="apellidos" class="form-control" @bind-Value="nuevoUsuario.apellidos_usuario"
                                   @oninput="ValidarApellidos" />
                        <ValidationMessage For="@(() => nuevoUsuario.apellidos_usuario)" />
                        <span class="text-danger" id="apellidosError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="edad">Edad:</label>
                        <InputNumber id="edad" class="form-control" @bind-Value="nuevoUsuario.edad_usuario" />
                        <span class="text-danger" id="edadError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="correo">Correo Electrónico:</label>
                        <InputText id="correo" class="form-control" @bind-Value="nuevoUsuario.correo_usuario"
                                   @oninput="ValidarCorreo" />
                        <ValidationMessage For="@(() => nuevoUsuario.correo_usuario)" />
                        <span class="text-danger" id="correoError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="celular">Número de Celular:</label>
                        <InputText id="celular" class="form-control" @bind-Value="nuevoUsuario.celular_usuario"
                                   @oninput="ValidarCelular" />
                        <ValidationMessage For="@(() => nuevoUsuario.celular_usuario)" />
                        <span class="text-danger" id="celularError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="telefono">Número de Teléfono:</label>
                        <InputText id="telefono" class="form-control" @bind-Value="nuevoUsuario.telefono_usuario"
                                   @oninput="ValidarTelefono" />
                        <ValidationMessage For="@(() => nuevoUsuario.telefono_usuario)" />
                        <span class="text-danger" id="telefonoError"></span>
                    </div>

                    <!-- Datos del Estudiante -->
                    <div class="form-group mb-3">
                        <label for="tipoEstudiante">Tipo de Estudiante:</label>
                        <InputSelect id="tipoEstudiante" class="form-control" @bind-Value="nuevoEstudiante.tipo_estudiante">
                            <option value="">Seleccione un tipo</option>
                            <option value="Docente">Docente</option>
                            <option value="Grupo de atención prioritaria">Grupo de atención prioritaria</option>
                        </InputSelect>
                    </div>

                    <!-- Selección de Curso -->
                    <div class="form-group mb-3">
                        <label for="curso">Curso:</label>
                        <select id="curso" class="form-control" @onchange="OnCursoSeleccionadoChange">
                            <option value="">Seleccione un curso</option>
                            @foreach (var curso in cursos)
                            {
                                <option value="@curso.id_curso">@curso.nombre_curso</option>
                            }
                        </select>
                    </div>

                    <!-- Selección de Periodo -->
                    <div class="form-group mb-3">
                        <label for="periodo">Periodo:</label>
                        <InputSelect id="periodo" class="form-control" @bind-Value="idPeriodoSeleccionado">
                            <option value="">Seleccione un periodo</option>
                            @foreach (var periodo in periodosUnicos)
                            {
                                <option value="@periodo.id_periodo">@periodo.nombre_periodo</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="card-footer text-center">
                    <button type="submit" class="btn btn-success me-2">Guardar y Matricular</button>
                    <button type="button" class="btn btn-secondary" @onclick="Regresar">Cancelar</button>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-2">@errorMessage</div>
                    }
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private DirectorioDeArchivos.Shared.Usuario nuevoUsuario = new DirectorioDeArchivos.Shared.Usuario();
    private DirectorioDeArchivos.Shared.Estudiante nuevoEstudiante = new DirectorioDeArchivos.Shared.Estudiante();
    private List<Curso> cursos = new List<Curso>();
    private List<PeriodoConNombre> periodosUnicos = new List<PeriodoConNombre>();
    private int idCursoSeleccionado;
    private int idPeriodoSeleccionado;
    private string errorMessage;
    private bool FormIsValid { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        await CargarCursos();
    }

    private async Task CargarCursos()
    {
        try
        {
            cursos = await Http.GetFromJsonAsync<List<Curso>>("http://localhost:5117/api/Curso");
        }
        catch (Exception)
        {
            errorMessage = "Error al cargar los cursos. Por favor, recarga la página o inténtalo más tarde.";
        }
    }

    private async Task CargarPeriodos(int idCurso)
    {
        try
        {
            Console.WriteLine($"Cargando periodos para el curso con ID: {idCurso}");
            periodosUnicos = await Http.GetFromJsonAsync<List<PeriodoConNombre>>($"http://localhost:5117/api/Periodo/por-curso/{idCurso}");
            Console.WriteLine($"Periodos cargados: {periodosUnicos.Count}");
        }
        catch (HttpRequestException)
        {
            errorMessage = "Error al cargar los periodos. Por favor, recarga la página o inténtalo más tarde.";
        }
        catch (Exception)
        {
            errorMessage = "Ocurrió un error inesperado al cargar los periodos. Por favor, inténtalo de nuevo más tarde.";
        }
    }

    private async Task OnCursoSeleccionadoChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int idCurso))
        {
            idCursoSeleccionado = idCurso;
            Console.WriteLine($"Curso seleccionado: {idCursoSeleccionado}");
            await CargarPeriodos(idCursoSeleccionado);
        }
        else
        {
            errorMessage = "El ID del curso seleccionado no es válido.";
        }
    }

    private async Task HandleValidSubmit()
    {
        // Llama a la función de JavaScript que valida todos los campos
        await JSRuntime.InvokeVoidAsync("validarTodosLosCampos");

        // Recupera el valor de formIsValid para determinar si el formulario es válido
        bool formIsValid = await JSRuntime.InvokeAsync<bool>("eval", "window.formIsValid");

        if (!formIsValid)
        {
            await HandleErrorAsync("Hay errores en el formulario. Por favor, corrígelos antes de continuar.");
            return;
        }
        else
        {
            try
            {
                // Guardar el usuario y obtener su ID, especificando que es un Estudiante
                var usuarioId = await GuardarUsuario();

                // Guardar los datos del estudiante
                nuevoEstudiante.id_usuario = usuarioId;
                var estudianteId = await GuardarEstudiante(nuevoEstudiante);

                // Registrar la matrícula del estudiante
                await RegistrarMatricula(estudianteId, idCursoSeleccionado, idPeriodoSeleccionado);

                await sweetAletNotify("Estudiante creado y matriculado exitosamente", "success");

                NavigationManager.NavigateTo("/estudiantes");
            }
            catch (HttpRequestException)
            {
                await HandleErrorAsync("Hubo un problema al comunicarse con el servidor. Por favor, inténtalo de nuevo más tarde.");
            }
            catch (Exception)
            {
                await HandleErrorAsync("Ocurrió un error inesperado. Por favor, inténtalo de nuevo más tarde.");
            }
        }

        
    }

    private async Task<int> GuardarUsuario()
    {
        var response = await Http.PostAsJsonAsync($"http://localhost:5117/api/Usuario?tipoUsuario=Estudiante", nuevoUsuario);
        response.EnsureSuccessStatusCode();
        var usuarioCreado = await response.Content.ReadFromJsonAsync<DirectorioDeArchivos.Shared.Usuario>();
        return usuarioCreado.id_usuario;
    }

    private async Task<int> GuardarEstudiante(DirectorioDeArchivos.Shared.Estudiante estudiante)
    {
        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/Estudiante", estudiante);
        response.EnsureSuccessStatusCode();
        var estudianteCreado = await response.Content.ReadFromJsonAsync<DirectorioDeArchivos.Shared.Estudiante>();
        return estudianteCreado.id_estudiante;
    }

    private async Task RegistrarMatricula(int id_estudiante, int id_curso, int id_periodo)
    {
        var nuevaMatricula = new Matricula
            {
                id_estudiante = id_estudiante,
                id_curso = id_curso,
                id_periodo = id_periodo,
                fecha_inscripcion = DateTime.Now
            };

        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/Matricula", nuevaMatricula);
        response.EnsureSuccessStatusCode();
    }

    private void Regresar()
    {
        NavigationManager.NavigateTo("/estudiantes");
    }

    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }

    private async Task HandleErrorAsync(string friendlyMessage)
    {
        errorMessage = friendlyMessage;
        await sweetAletNotify(errorMessage, "error");
    }

    private void ValidarCedula(ChangeEventArgs e)
    {
        string cedula = e.Value?.ToString();
        JSRuntime.InvokeVoidAsync("validarCedula", cedula);
    }

    private void ValidarNombre(ChangeEventArgs e)
    {
        string nombre = e.Value?.ToString();  // Captura el valor directamente del evento
        JSRuntime.InvokeVoidAsync("validarNombre", nombre);
    }

    private void ValidarApellidos(ChangeEventArgs e)
    {
        string apellidos = e.Value?.ToString();
        JSRuntime.InvokeVoidAsync("validarApellidos", apellidos);
    }



    private void ValidarCorreo(ChangeEventArgs e)
    {
        string correo = e.Value?.ToString();
        JSRuntime.InvokeVoidAsync("validarCorreo", correo);
    }

    private void ValidarCelular(ChangeEventArgs e)
    {
        string celular = e.Value?.ToString();
        JSRuntime.InvokeVoidAsync("validarCelular", celular);
    }

    private void ValidarTelefono(ChangeEventArgs e)
    {
        string telefono = e.Value?.ToString();
        JSRuntime.InvokeVoidAsync("validarTelefono", telefono);
    }


}
