@page "/registrar-usuario"
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3 class="text-center my-4">Crear Nuevo Usuario</h3>

<EditForm Model="@nuevoUsuario" OnValidSubmit="HandleValidSubmit" class="container">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <div class="form-group mb-3">
                        <input type="hidden" id="formIsValid" value="true" />
                        <label for="cedula">Cédula:</label>
                        <InputText id="cedula" class="form-control" @bind-Value="nuevoUsuario.cedula_usuario"
                                   @oninput="ValidarCedula" />
                        <ValidationMessage For="@(() => nuevoUsuario.cedula_usuario)" />
                        <span class="text-danger" id="cedulaError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="nombre">Nombre:</label>
                        <InputText id="nombre" class="form-control" @bind-Value="nuevoUsuario.nombre_usuario"
                                   @oninput="ValidarNombre" />
                        <ValidationMessage For="@(() => nuevoUsuario.nombre_usuario)" />
                        <span class="text-danger" id="nombreError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="apellidos">Apellidos:</label>
                        <InputText id="apellidos" class="form-control" @bind-Value="nuevoUsuario.apellidos_usuario"
                                   @oninput="ValidarApellidos" />
                        <ValidationMessage For="@(() => nuevoUsuario.apellidos_usuario)" />
                        <span class="text-danger" id="apellidosError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="edad">Edad:</label>
                        <InputNumber id="edad" class="form-control" @bind-Value="nuevoUsuario.edad_usuario" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="correo">Correo Electrónico:</label>
                        <InputText id="correo" class="form-control" @bind-Value="nuevoUsuario.correo_usuario"
                                   @oninput="ValidarCorreo" />
                        <ValidationMessage For="@(() => nuevoUsuario.correo_usuario)" />
                        <span class="text-danger" id="correoError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="celular">Número de Celular:</label>
                        <InputText id="celular" class="form-control" @bind-Value="nuevoUsuario.celular_usuario"
                                   @oninput="ValidarCelular" />
                        <ValidationMessage For="@(() => nuevoUsuario.celular_usuario)" />
                        <span class="text-danger" id="celularError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="telefono">Número de Teléfono:</label>
                        <InputText id="telefono" class="form-control" @bind-Value="nuevoUsuario.telefono_usuario"
                                   @oninput="ValidarTelefono" />
                        <ValidationMessage For="@(() => nuevoUsuario.telefono_usuario)" />
                        <span class="text-danger" id="telefonoError"></span>
                    </div>
                    <div class="form-group mb-3">
                        <label for="tipoUsuario">Tipo de Usuario:</label>
                        <InputSelect id="tipoUsuario" class="form-control" @bind-Value="tipoUsuario">
                            <option value="">Seleccione un tipo</option>
                            <option value="Administrador">Administrador</option>
                            <option value="Instructor">Instructor</option>
                            <option value="Estudiante">Estudiante</option>
                        </InputSelect>
                    </div>
                    @if (tipoUsuario == "Estudiante")
                    {
                        <div class="form-group mb-3">
                            <label for="tipoEstudiante">Tipo de Estudiante:</label>
                            <InputSelect id="tipoEstudiante" class="form-control" @bind-Value="nuevoEstudiante.tipo_estudiante">
                                <option value="">Seleccione un tipo</option>
                                <option value="Docente">Docente</option>
                                <option value="Grupo de atención prioritaria">Grupo de atención prioritaria</option>
                            </InputSelect>
                        </div>
                    }
                </div>
                <div class="card-footer text-center">
                    <button type="submit" class="btn btn-success me-2">Guardar</button>
                    <button type="button" class="btn btn-secondary" @onclick="Regresar">Cancelar</button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private DirectorioDeArchivos.Shared.Usuario nuevoUsuario = new DirectorioDeArchivos.Shared.Usuario();
    private DirectorioDeArchivos.Shared.Estudiante nuevoEstudiante = new DirectorioDeArchivos.Shared.Estudiante();
    private string tipoUsuario;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // Cargar cualquier dato necesario al iniciar
    }

    private async Task HandleValidSubmit()
    {
        // Llama a la función de JavaScript que valida todos los campos
        await JSRuntime.InvokeVoidAsync("validarTodosLosCampos");

        // Recupera el valor de formIsValid para determinar si el formulario es válido
        bool formIsValid = await JSRuntime.InvokeAsync<bool>("eval", "window.formIsValid");
        if (!formIsValid)
        {
            await MostrarNotificacion("Hay errores en el formulario. Por favor, corrígelos antes de continuar.", "error");
            return;

        }

        else
        {
            try
            {
                // Confirmación antes de registrar el usuario
                var confirmed = await MostrarConfirmacion("¿Está seguro de que desea registrar este usuario?", "warning");
                if (!confirmed) return;

                // Guardar el usuario y obtener su ID
                var response = await Http.PostAsJsonAsync($"http://localhost:5117/api/Usuario?tipoUsuario={tipoUsuario}", nuevoUsuario);
                response.EnsureSuccessStatusCode();

                // Leer la respuesta para obtener el usuario creado
                var usuarioCreado = await response.Content.ReadFromJsonAsync<DirectorioDeArchivos.Shared.Usuario>();
                var usuarioId = usuarioCreado.id_usuario;

                // Si es un estudiante, guardar en la tabla Estudiante
                if (tipoUsuario == "Estudiante")
                {
                    nuevoEstudiante.id_usuario = usuarioId;
                    await GuardarEstudiante(nuevoEstudiante);
                }
                // Si es un instructor, guardar en la tabla Instructor
                else if (tipoUsuario == "Instructor")
                {
                    var nuevoInstructor = new DirectorioDeArchivos.Shared.Instructor { id_usuario = usuarioId };
                    await GuardarInstructor(nuevoInstructor);
                }

                // Mostrar alerta de éxito
                await MostrarNotificacion("Usuario registrado correctamente.", "success");

                NavigationManager.NavigateTo("/adminDashboard");
            }
            catch (HttpRequestException ex)
            {
                await MostrarNotificacion($"Error: {ex.Message}", "error");
            }
            catch (Exception ex)
            {
                await MostrarNotificacion($"Ocurrió un error inesperado. Por favor, intente nuevamente.", "error");
            }
            
        }
        
    }

    private async Task GuardarEstudiante(DirectorioDeArchivos.Shared.Estudiante estudiante)
    {
        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/Estudiante", estudiante);
        response.EnsureSuccessStatusCode();
    }

    private async Task GuardarInstructor(DirectorioDeArchivos.Shared.Instructor instructor)
    {
        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/Instructor", instructor);
        response.EnsureSuccessStatusCode();
    }

    private void Regresar()
    {
        NavigationManager.NavigateTo("/adminDashboard");
    }

    private async Task MostrarNotificacion(string mensaje, string tipo)
    {
        var options = new
        {
            Title = mensaje,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }

    private async Task<bool> MostrarConfirmacion(string mensaje, string tipo)
    {
        var options = new
        {
            Title = mensaje,
            Icon = tipo,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "No"
        };
        return await JSRuntime.InvokeAsync<bool>("FireSweetAlertConfirm", options);
    }

    private void ValidarCedula(ChangeEventArgs e)
    {
        string cedula = e.Value?.ToString();
        JSRuntime.InvokeVoidAsync("validarCedula", cedula);
    }

    private void ValidarNombre(ChangeEventArgs e)
    {
        string nombre = e.Value?.ToString();  // Captura el valor directamente del evento
        JSRuntime.InvokeVoidAsync("validarNombre", nombre);
    }

    private void ValidarApellidos(ChangeEventArgs e)
    {
        string apellidos = e.Value?.ToString();
        JSRuntime.InvokeVoidAsync("validarApellidos", apellidos);
    }



    private void ValidarCorreo(ChangeEventArgs e)
    {
        string correo = e.Value?.ToString();
        JSRuntime.InvokeVoidAsync("validarCorreo", correo);
    }

    private void ValidarCelular(ChangeEventArgs e)
    {
        string celular = e.Value?.ToString();
        JSRuntime.InvokeVoidAsync("validarCelular", celular);
    }

    private void ValidarTelefono(ChangeEventArgs e)
    {
        string telefono = e.Value?.ToString();
        JSRuntime.InvokeVoidAsync("validarTelefono", telefono);
    }
}
