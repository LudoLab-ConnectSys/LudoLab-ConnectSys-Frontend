@page "/approve-users"
@using LudoLab_ConnectSys_Frontend.Services.Cuentas
@layout AdminLayout
@inject IJSRuntime Js
@inject ICuentaService CuentaService

<h3>Aprobar usuarios</h3>

@if (users == null)
{
    <p>
        <em>Cargando...</em>
    </p>
}
else if (users.Count == 0)
{
    <p>No hay usuarios pendientes de aprobación.</p>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Id</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Fecha Nacimiento</th>
            <th>Correo</th>
            <th>Acciones</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.IdUsuario</td>
                <td>@user.NombreUsuario</td>
                <td>@user.ApellidosUsuario</td>
                <td>@user.FechaNacimiento</td>
                <td>@user.CorreoUsuario</td>
                <td>
                    <button class="btn btn-success" @onclick="() => ConfirmApproveUser(user)">Aprobar</button>
                    <button class="btn btn-danger" @onclick="() => ConfirmRejectUser(user)">Rechazar</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<UsuarioModel> users;

    protected override async Task OnInitializedAsync()
    {
        users = await CuentaService.ObtenerUsuariosSinContrasenaAsync();
    }

    private async Task ConfirmApproveUser(UsuarioModel user)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", $"¿Estás seguro de aprobar el registro del usuario {user.NombreUsuario} {user.ApellidosUsuario}?");
        if (confirmed)
        {
            var result = await CuentaService.AprobarUsuarioAsync(user.IdUsuario);
            if (result)
            {
                users.Remove(user);
                await SweetAlertNotify("Usuario aprobado con éxito.", "success");
            }
            else
            {
                await SweetAlertNotify("Error al aprobar el usuario.", "error");
            }
        }
    }

    private async Task ConfirmRejectUser(UsuarioModel user)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", $"¿Estás seguro de rechazar el registro del usuario {user.NombreUsuario} {user.ApellidosUsuario}?");
        if (confirmed)
        {
            var result = await CuentaService.RechazarUsuarioAsync(user.IdUsuario);
            if (result)
            {
                users.Remove(user);
                await SweetAlertNotify("Usuario rechazado con éxito.", "success");
            }
            else
            {
                await SweetAlertNotify("Error al rechazar el usuario.", "error");
            }
        }
    }

    private async Task SweetAlertNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await Js.InvokeVoidAsync("FireSweetAlert", options);
    }

}