@page "/approve-users"
@layout AdminLayout
@inject IJSRuntime Js

<h3>Aprobar usuarios</h3>

@if (users == null)
{
    <p>
        <em>Cargando...</em>
    </p>
}
else if (users.Count == 0)
{
    <p>No hay usuarios pendientes de aprobación.</p>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Id</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Edad</th>
            <th>Correo</th>
            <th>Acciones</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.Nombre</td>
                <td>@user.Apellido</td>
                <td>@user.Edad</td>
                <td>@user.Correo</td>
                <td>
                    <button class="btn btn-success" @onclick="() => ConfirmApproveUser(user)">Aprobar</button>
                    <button class="btn btn-danger" @onclick="() => ConfirmRejectUser(user)">Rechazar</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private List<Usuario> users;

    protected override void OnInitialized()
    {
        // Datos quemados de ejemplo
        users = new List<Usuario>
        {
            new Usuario { Id = 1, Nombre = "Juan", Apellido = "Pérez", Edad = 30, Correo = "juan.perez@example.com" },
            new Usuario { Id = 2, Nombre = "Ana", Apellido = "García", Edad = 25, Correo = "ana.garcia@example.com" },
            new Usuario { Id = 3, Nombre = "Luis", Apellido = "Martínez", Edad = 28, Correo = "luis.martinez@example.com" },
            new Usuario { Id = 4, Nombre = "María", Apellido = "López", Edad = 32, Correo = "maria.lopez@example.com" },
            new Usuario { Id = 5, Nombre = "Carlos", Apellido = "Sánchez", Edad = 35, Correo = "carlos.sanchez@example.com" }
        };
    }

    private async Task ConfirmApproveUser(Usuario user)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", $"¿Estás seguro de aprobar el registro del usuario {user.Nombre} {user.Apellido}?");
        if (confirmed)
        {
            ApproveUser(user);
        }
    }

    private async Task ConfirmRejectUser(Usuario user)
    {
        var confirmed = await Js.InvokeAsync<bool>("confirm", $"¿Estás seguro de rechazar el registro del usuario {user.Nombre} {user.Apellido}?");
        if (confirmed)
        {
            RejectUser(user);
        }
    }

    private void ApproveUser(Usuario user)
    {
        // Lógica para aprobar el usuario
        users.Remove(user);
        Console.WriteLine($"Usuario {user.Nombre} {user.Apellido} aprobado.");
    }

    private void RejectUser(Usuario user)
    {
        // Lógica para rechazar el usuario
        users.Remove(user);
        Console.WriteLine($"Usuario {user.Nombre} {user.Apellido} rechazado.");
    }

    private void ViewUser(Usuario user)
    {
        // Lógica para ver detalles del usuario
        Console.WriteLine($"Viendo detalles del usuario {user.Nombre} {user.Apellido}.");
    }

    public class Usuario
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Apellido { get; set; }
        public int Edad { get; set; }
        public string Correo { get; set; }
    }

}