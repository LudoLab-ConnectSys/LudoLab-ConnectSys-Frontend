@page "/crear-grupos"
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime Js

<h3>Crear Grupos</h3>

<div class="alert alert-info">
    <strong>¿Prefieres crear los grupos manualmente?</strong> Haz clic en el botón a continuación para ir a la opción de creación manual de grupos.
    <button class="btn btn-secondary ml-3" @onclick="CrearGruposManualmente">Crear Grupos Manualmente</button>
</div>

<div class="form-container section">
    <form @onsubmit="CrearGrupos">
        <div class="form-group">
            <label for="cursoSelect">Curso:</label>
            <select id="cursoSelect" @bind="parametros.CursoId" @bind:after="CargarPeriodos" class="form-control">
                <option value="">Seleccione un curso</option>
                @if (cursos != null)
                {
                    @foreach (var curso in cursos)
                    {
                        <option value="@curso.id_curso">@curso.nombre_curso</option>
                    }
                }
            </select>
        </div>

        <div class="form-group">
            <label for="periodoSelect">Periodo:</label>
            <select id="periodoSelect" @bind="parametros.PeriodoId" @bind:after="CargarEstudiantesEInstructores" class="form-control">
                <option value="">Seleccione un periodo</option>
                @if (periodos != null)
                {
                    @foreach (var periodo in periodos)
                    {
                        <option value="@periodo.id_periodo">@periodo.nombre_periodo</option>
                    }
                }
            </select>
        </div>

        <div class="form-group">
            <label for="numEstudiantes">Número de Estudiantes por Grupo:</label>
            <input type="number" id="numEstudiantes" @bind="parametros.NumeroEstudiantesPorGrupo" class="form-control" />
        </div>

        <div class="form-group">
            <label for="maxGruposInstructor">Número Máximo de Grupos por Instructor:</label>
            <input type="number" id="maxGruposInstructor" @bind="parametros.NumeroMaximoGruposPorInstructor" class="form-control" />
        </div>

        <div class="form-group">
            <label for="horasClase">Horas por Clase:</label>
            <input type="number" id="horasClase" @bind="parametros.HorasPorClase" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary">Crear Grupos</button>
    </form>
</div>

<div class="section">
    <h4>Estudiantes sin grupo</h4>
    @if (estudiantesSinGrupo != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Horarios Preferentes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var estudiante in estudiantesSinGrupo)
                {
                    <tr>
                        <td>@estudiante.id_estudiante</td>
                        <td>@estudiante.nombre_usuario @estudiante.apellidos_usuario</td>
                        <td>
                            @foreach (var horario in estudiante.horariosPreferentes)
                            {
                                <div>@horario.dia_semana: @horario.hora_inicio - @horario.hora_fin</div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Cargando estudiantes...</p>
    }
</div>

<div class="section">
    <h4>Instructores sin grupo</h4>
    @if (instructoresSinGrupo != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Horarios Preferentes</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var instructor in instructoresSinGrupo)
                {
                    <tr>
                        <td>@instructor.id_instructor</td>
                        <td>@instructor.nombre_usuario @instructor.apellidos_usuario</td>
                        <td>
                            @foreach (var horario in instructor.horariosPreferentes)
                            {
                                <div>@horario.dia_semana: @horario.hora_inicio - @horario.hora_fin</div>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>Cargando instructores...</p>
    }
</div>


@if (grupos != null)
{
    <div class="section">
        <h4>Previsualización de Grupos Creados</h4>
        <div class="grupos-list">
            @foreach (var grupo in grupos)
            {
                <div class="grupo-item">
                    <strong>Grupo:</strong> @grupo.nombre_grupo <br />
                    <strong>Instructor:</strong> @grupo.nombre_instructor<br />
                    <strong>Estudiantes:</strong>
                    <ul>
                        @if (grupo.estudiantes != null)
                        {
                            @foreach (var estudiante in grupo.estudiantes)
                            {
                                <li>@estudiante</li> <!-- Aquí `estudiante` es una cadena, así que no concatenamos nombre y apellido -->
                            }
                        }
                    </ul>
                    <strong>Horario:</strong>
                    <ul>
                        @if (grupo.horarios != null)
                        {
                            @foreach (var horario in grupo.horarios)
                            {
                                <li>@horario.dia_semana: @horario.hora_inicio - @horario.hora_fin</li>
                            }
                        }
                    </ul>
                </div>
            }
        </div>
        <button class="btn btn-success" @onclick="GuardarGrupos">Guardar Grupos</button>
    </div>
}

<div class="section">
    <h4>Instructores y Estudiantes sin asignar</h4>
    @if (estudiantesSinGrupo != null && instructoresSinGrupo != null)
    {
        <div>
            <h5>Estudiantes sin asignar:</h5>
            <ul>
                @foreach (var estudiante in estudiantesSinGrupo)
                {
                    <li>@estudiante.nombre_usuario @estudiante.apellidos_usuario</li>
                }
            </ul>
        </div>
        <div>
            <h5>Instructores sin asignar:</h5>
            <ul>
                @foreach (var instructor in instructoresSinGrupo)
                {
                    <li>@instructor.nombre_usuario @instructor.apellidos_usuario</li>
                }
            </ul>
        </div>
    }
</div>

@code {
    private CrearGruposParametros parametros = new CrearGruposParametros();
    private List<GrupoConDetalles> grupos;
    private List<Curso> cursos;
    private List<PeriodoConNombre> periodos;
    private List<EstudianteConDetalles> estudiantesSinGrupo;
    private List<InstructorConDetalles> instructoresSinGrupo;

    protected override async Task OnInitializedAsync()
    {
        cursos = await Http.GetFromJsonAsync<List<Curso>>("http://localhost:5117/api/Curso");
    }

    private async Task CargarPeriodos()
    {
        if (parametros.CursoId != 0)
        {
            periodos = await Http.GetFromJsonAsync<List<PeriodoConNombre>>($"http://localhost:5117/api/Periodo/por-curso/{parametros.CursoId}");
            StateHasChanged();
        }
    }

    private async Task CargarEstudiantesEInstructores()
    {
        if (parametros.PeriodoId != 0)
        {
            estudiantesSinGrupo = await Http.GetFromJsonAsync<List<EstudianteConDetalles>>($"http://localhost:5117/api/Estudiante/sin-grupo/{parametros.CursoId}/{parametros.PeriodoId}");
            instructoresSinGrupo = await Http.GetFromJsonAsync<List<InstructorConDetalles>>($"http://localhost:5117/api/Instructor/sin-grupo/{parametros.CursoId}/{parametros.PeriodoId}");
            StateHasChanged();
        }
    }

    private async Task CrearGrupos()
    {
        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/Grupo/CrearGrupos", parametros);
        if (response.IsSuccessStatusCode)
        {
            grupos = await response.Content.ReadFromJsonAsync<List<GrupoConDetalles>>();
            await sweetAletNotify("Grupos creados exitosamente", "success");
        }
        else
        {
            await sweetAletNotify("Error al crear los grupos", "error");
        }
    }

    private async Task GuardarGrupos()
    {
        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/Grupo/GuardarGrupos", grupos);
        if (response.IsSuccessStatusCode)
        {
            await sweetAletNotify("Grupos guardados exitosamente", "success");
        }
        else
        {
            await sweetAletNotify("Error al guardar los grupos", "error");
        }
    }

    private void CrearGruposManualmente()
    {
        Navigation.NavigateTo("/crear-grupos-manualmente");
    }

    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await Js.InvokeVoidAsync("FireSweetAlert", options);
    }
}
