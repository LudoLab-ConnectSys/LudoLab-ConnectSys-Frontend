@page "/grupos-de-edicion/{EdicionId:int}"
@inject NavigationManager NavigationManager

<h3>Grupos de la Edición</h3>

<button class="btn btn-success" @onclick="() => CrearNuevoGrupo()">Añadir Nuevo Grupo Manualmente</button>
<button class="btn btn-secondary" @onclick="() => ConfigurarEmparejamiento()">Configurar Horarios y Crear Grupos Automáticamente</button>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre del Profesor</th>
            <th>Estudiantes</th>
            <th>Horario</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var grupo in grupos)
        {
            <tr>
                <td>@grupo.Id</td>
                <td>@grupo.Profesor.Nombre</td>
                <td>
                    @foreach (var estudiante in grupo.Estudiantes)
                    {
                        <p>@estudiante.Nombre</p>
                    }
                </td>
                <td>@grupo.Horario.Dia - @grupo.Horario.HoraInicio - @grupo.Horario.HoraFin</td>
                <td>
                    <button class="btn btn-info" @onclick="() => VerDetalles(grupo.Id)">Ver</button>
                    <button class="btn btn-primary" @onclick="() => EditarGrupo(grupo.Id)">Editar</button>
                    <button class="btn btn-danger" @onclick="() => EliminarGrupo(grupo.Id)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (!grupos.Any())
{
    <p>No hay grupos disponibles para esta edición. ¿Desea crear un nuevo grupo?</p>
}

@code {
    [Parameter]
    public int EdicionId { get; set; }
    private List<Grupo> grupos = new List<Grupo>();

    protected override void OnInitialized()
    {
        // Aquí deberías cargar los grupos de la edición desde la base de datos o servicio
        grupos = ObtenerGruposPorEdicionId(EdicionId);
    }

    private void VerDetalles(int id)
    {
        NavigationManager.NavigateTo($"/detalle-grupo/{id}");
    }

    private void CrearNuevoGrupo()
    {
        NavigationManager.NavigateTo($"/crear-grupo/{EdicionId}");
    }

    private void ConfigurarEmparejamiento()
    {
        NavigationManager.NavigateTo($"/configurar-emparejamiento/{EdicionId}");
    }

    private void EditarGrupo(int id)
    {
        NavigationManager.NavigateTo($"/editar-grupo/{id}");
    }

    private void EliminarGrupo(int id)
    {
        grupos.RemoveAll(x => x.Id == id);
    }

    public class Grupo
    {
        public int Id { get; set; }
        public Profesor Profesor { get; set; }
        public List<Estudiante> Estudiantes { get; set; } = new List<Estudiante>();
        public Horario Horario { get; set; }
    }

    public class Profesor
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
    }

    public class Estudiante
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
    }

    public class Horario
    {
        public int Id { get; set; }
        public DayOfWeek Dia { get; set; }
        public TimeSpan HoraInicio { get; set; }
        public TimeSpan HoraFin { get; set; }
    }

    private List<Grupo> ObtenerGruposPorEdicionId(int edicionId)
    {
        // Simulación de datos de grupos
        return new List<Grupo>
        {
            new Grupo
            {
                Id = 1,
                Profesor = new Profesor { Id = 1, Nombre = "Profesor A" },
                Estudiantes = new List<Estudiante>
                {
                    new Estudiante { Id = 1, Nombre = "Estudiante 1" },
                    new Estudiante { Id = 2, Nombre = "Estudiante 2" }
                },
                Horario = new Horario { Dia = DayOfWeek.Monday, HoraInicio = new TimeSpan(8, 0, 0), HoraFin = new TimeSpan(10, 0, 0) }
            },
            new Grupo
            {
                Id = 2,
                Profesor = new Profesor { Id = 2, Nombre = "Profesor B" },
                Estudiantes = new List<Estudiante>
                {
                    new Estudiante { Id = 3, Nombre = "Estudiante 3" },
                    new Estudiante { Id = 4, Nombre = "Estudiante 4" }
                },
                Horario = new Horario { Dia = DayOfWeek.Wednesday, HoraInicio = new TimeSpan(10, 0, 0), HoraFin = new TimeSpan(12, 0, 0) }
            }
        };
    }
}
