@page "/grupo/{id_grupo:int}/detalles"
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Detalles del Grupo</h3>

@if (grupo != null)
{
    <EditForm Model="@grupo" OnValidSubmit="GuardarCambios">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="nombre_grupo">Nombre del Grupo:</label>
            <InputText id="nombre_grupo" @bind-Value="grupo.nombre_grupo" class="form-control" />
        </div>

        <div class="form-group">
            <label for="instructorSelect">Instructor:</label>
            <select id="instructorSelect" @bind="grupo.id_instructor" class="form-control">
                <option value="">Seleccione un instructor</option>
                @foreach (var instructor in instructores)
                {
                    <option value="@instructor.id_instructor">@instructor.nombre_usuario @instructor.apellidos_usuario</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="estudianteSelect">Estudiantes:</label>
            <select id="estudianteSelect" @bind="selectedEstudianteId" class="form-control">
                <option value="">Seleccione un estudiante</option>
                @foreach (var estudiante in estudiantesSinGrupo)
                {
                    <option value="@estudiante.id_estudiante">@estudiante.nombre_usuario @estudiante.apellidos_usuario</option>
                }
            </select>
            <button type="button" class="btn btn-secondary mt-2" @onclick="ConfirmarAgregarEstudiante">Agregar Estudiante</button>
        </div>

        <div class="form-group">
            <label>Estudiantes Seleccionados:</label>
            <ul>
                @foreach (var estudianteId in grupo.estudiantes)
                {
                    var estudiante = todosEstudiantes.FirstOrDefault(e => e.id_estudiante == estudianteId);
                    if (estudiante != null)
                    {
                        <li>
                            @estudiante.nombre_usuario @estudiante.apellidos_usuario
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => ConfirmarEliminarEstudiante(estudianteId)">Eliminar</button>
                        </li>
                    }
                }
            </ul>
        </div>

        <div class="form-group">
            <label>Horarios:</label>
            @foreach (var horario in grupo.horarios)
            {
                <div class="form-inline mb-2">
                    <select @bind="horario.dia_semana" class="form-control mr-2">
                        <option value="Lunes">Lunes</option>
                        <option value="Martes">Martes</option>
                        <option value="Miércoles">Miércoles</option>
                        <option value="Jueves">Jueves</option>
                        <option value="Viernes">Viernes</option>
                    </select>
                    <input type="time" value="@(new DateTime(horario.hora_inicio.Ticks).ToString("HH:mm"))" @oninput="e => horario.hora_inicio = TimeSpan.Parse(e.Value.ToString())" class="form-control mr-2" />
                    <input type="time" value="@(new DateTime(horario.hora_fin.Ticks).ToString("HH:mm"))" @oninput="e => horario.hora_fin = TimeSpan.Parse(e.Value.ToString())" class="form-control mr-2" />
                    <button type="button" class="btn btn-danger" @onclick="() => ConfirmarEliminarHorario(horario)">Eliminar</button>
                </div>
            }
            <button type="button" class="btn btn-secondary" @onclick="AgregarHorario">Agregar Horario</button>
        </div>

        <button type="submit" class="btn btn-primary">Guardar Cambios</button>
    </EditForm>
}
else
{
    <p><em>Cargando...</em></p>
}

@code {
    [Parameter]
    public int id_grupo { get; set; }

    private ActualizarGrupo grupo = new ActualizarGrupo();
    private List<InstructorConDetalles> instructores = new List<InstructorConDetalles>();
    private List<EstudianteConDetalles> todosEstudiantes = new List<EstudianteConDetalles>();
    private List<EstudianteConDetalles> estudiantesSinGrupo = new List<EstudianteConDetalles>();
    private int selectedEstudianteId;

    protected override async Task OnInitializedAsync()
    {
        await CargarGrupoDetalles();
        await CargarInstructores();
        await CargarEstudiantesAsignados();
    }

    private async Task CargarGrupoDetalles()
    {
        try
        {
            var grupoDetalles = await Http.GetFromJsonAsync<GrupoConDetalles>($"http://localhost:5117/api/Grupo/{id_grupo}/detalles");
            var periodo = await Http.GetFromJsonAsync<PeriodoConDetalles>($"http://localhost:5117/api/Periodo/detalles/{grupoDetalles.id_periodo}");
            await CargarEstudiantes(periodo.id_curso, grupoDetalles.id_periodo);

            grupo = new ActualizarGrupo
                {
                    id_grupo = grupoDetalles.id_grupo,
                    id_periodo = grupoDetalles.id_periodo,
                    id_instructor = grupoDetalles.id_instructor,
                    nombre_grupo = grupoDetalles.nombre_grupo,
                    estudiantes = grupoDetalles.estudiantes
                        .Select(e => todosEstudiantes.FirstOrDefault(s => $"{s.nombre_usuario} {s.apellidos_usuario}" == e)?.id_estudiante ?? 0)
                        .Where(id => id != 0)
                        .ToList(),
                    horarios = grupoDetalles.horarios
                };
        }
        catch (Exception)
        {
            await MostrarNotificacion("Ocurrió un error al cargar los detalles del grupo. Por favor, intente nuevamente más tarde.", "error");
        }
    }

    private async Task CargarInstructores()
    {
        try
        {
            instructores = await Http.GetFromJsonAsync<List<InstructorConDetalles>>("http://localhost:5117/api/Instructor/todos");
        }
        catch (Exception)
        {
            await MostrarNotificacion("Ocurrió un error al cargar los instructores. Por favor, intente nuevamente más tarde.", "error");
        }
    }

    private async Task CargarEstudiantes(int id_curso, int id_periodo)
    {
        try
        {
            todosEstudiantes = await Http.GetFromJsonAsync<List<EstudianteConDetalles>>($"http://localhost:5117/api/Estudiante/sin-grupo/{id_curso}/{id_periodo}");
            estudiantesSinGrupo = todosEstudiantes;
        }
        catch (Exception)
        {
            await MostrarNotificacion("Ocurrió un error al cargar los estudiantes. Por favor, intente nuevamente más tarde.", "error");
        }
    }

    private async Task CargarEstudiantesAsignados()
    {
        try
        {
            var estudiantesAsignados = await Http.GetFromJsonAsync<List<EstudianteConDetalles>>($"http://localhost:5117/api/Grupo/{id_grupo}/estudiantes");
            todosEstudiantes.AddRange(estudiantesAsignados);
            grupo.estudiantes.AddRange(estudiantesAsignados.Select(e => e.id_estudiante));
        }
        catch (Exception)
        {
            await MostrarNotificacion("Ocurrió un error al cargar los estudiantes asignados. Por favor, intente nuevamente más tarde.", "error");
        }
    }

    private async Task ConfirmarAgregarEstudiante()
    {
        var confirmed = await MostrarConfirmacion("¿Estás seguro de que deseas agregar este estudiante?", "warning");
        if (confirmed)
        {
            AgregarEstudianteSeleccionado();
        }
    }

    private void AgregarEstudianteSeleccionado()
    {
        if (selectedEstudianteId != 0 && !grupo.estudiantes.Contains(selectedEstudianteId))
        {
            grupo.estudiantes.Add(selectedEstudianteId);
        }
    }

    private async Task ConfirmarEliminarEstudiante(int estudianteId)
    {
        var confirmed = await MostrarConfirmacion("¿Estás seguro de que deseas eliminar este estudiante?", "warning");
        if (confirmed)
        {
            RemoverEstudianteSeleccionado(estudianteId);
        }
    }

    private void RemoverEstudianteSeleccionado(int estudianteId)
    {
        grupo.estudiantes.Remove(estudianteId);
    }

    private async Task ConfirmarEliminarHorario(HorarioGrupo horario)
    {
        var confirmed = await MostrarConfirmacion("¿Estás seguro de que deseas eliminar este horario?", "warning");
        if (confirmed)
        {
            EliminarHorario(horario);
        }
    }

    private void AgregarHorario()
    {
        grupo.horarios.Add(new HorarioGrupo());
    }

    private void EliminarHorario(HorarioGrupo horario)
    {
        grupo.horarios.Remove(horario);
    }

    private async Task GuardarCambios()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"http://localhost:5117/api/Grupo/{id_grupo}", grupo);
            if (response.IsSuccessStatusCode)
            {
                await MostrarNotificacion("Cambios guardados exitosamente.", "success");
                NavigationManager.NavigateTo($"/grupo/{id_grupo}");
            }
            else
            {
                await MostrarNotificacion("Ocurrió un error al guardar los cambios. Por favor, intente nuevamente.", "error");
            }
        }
        catch (Exception)
        {
            await MostrarNotificacion("Ocurrió un error al guardar los cambios. Por favor, intente nuevamente.", "error");
        }
    }

    private async Task MostrarNotificacion(string mensaje, string tipo)
    {
        var options = new
        {
            Title = mensaje,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }

    private async Task<bool> MostrarConfirmacion(string mensaje, string tipo)
    {
        var options = new
        {
            Title = mensaje,
            Icon = tipo,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "No"
        };
        return await JSRuntime.InvokeAsync<bool>("FireSweetAlertConfirm", options);
    }
}
