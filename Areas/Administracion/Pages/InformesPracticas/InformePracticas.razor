@inject NavigationManager NavigationManager
@page "/informe-practicas"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject SweetAlertService Swal
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml;
@using ClosedXML.Excel;
@using System.IO

<h2 class="titulo-resultado">Generar informes de prácticas profesionales</h2>

<h3>Subir Archivo Excel</h3>
@if (isLoading)
{
    <SpinnerPage />
}
<div>
    <label class="btn btn-success">
        <i class="bi bi-file-earmark-spreadsheet-fill"></i>
        <InputFile OnChange="HandleFileSelected" class="d-none" accept=".xls,.xlsx,.xlsm" />
    </label>
    @if (!string.IsNullOrEmpty(uploadedFileName))
    {
        <div class="mt-2 alert alert-info">
            Archivo subido: @uploadedFileName
        </div>

        <!-- Button trigger modal -->
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
            Editar Posiciones
        </button>
        <!-- Modal -->
        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-dialog-scrollable modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Editar las especificaciones de posiciones y textos para insertar</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mt-3">
                            <div class="form-group">
                                <label>Nombre completo del instructor:</label>
                                <div class="d-flex">
                                    <div class="mr-2">
                                        <label class="d-block">Fila 1:</label>
                                        <input type="number" min="1" @bind="row1" class="form-control" style="width: 80px;" />
                                    </div>
                                    <div>
                                        <label class="d-block">Columna 1 (A-Z):</label>
                                        <input type="text" @bind="col1Excel" class="form-control" style="width: 120px;" maxlength="1" />
                                    </div>
                                </div>
                            </div><br/>

                            <div class="form-group">
                                <label>Cédula del instructor:</label>
                                <div class="d-flex">
                                    <div class="mr-2">
                                        <label class="d-block">Fila 2:</label>
                                        <input type="number" min="1" @bind="row2" class="form-control" style="width: 80px;" />
                                    </div>
                                    <div>
                                        <label class="d-block">Columna 2 (A-Z):</label>
                                        <input type="text" @bind="col2Excel" class="form-control" style="width: 120px;" maxlength="1" />
                                    </div>
                                </div>
                            </div><br />

                            <div class="form-group">
                                <label>Horas obtenidas del instructor:</label>
                                <div class="d-flex">
                                    <div class="mr-2">
                                        <label class="d-block">Fila 3:</label>
                                        <input type="number" min="1" @bind="row3" class="form-control" style="width: 80px;" />
                                    </div>
                                    <div>
                                        <label class="d-block">Columna 3 (A-Z):</label>
                                        <input type="text" @bind="col3Excel" class="form-control" style="width: 120px;" maxlength="1" />
                                    </div>
                                </div>
                            </div><br />

                            <div>
                                <label>Horarios</label> <!--INICIO DE TABLA DE HORARIOS-->

                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th></th>
                                            <th>Lunes</th>
                                            <th>Martes</th>
                                            <th>Miércoles</th>
                                            <th>Jueves</th>
                                            <th>Viernes</th>
                                            <th>Sábado</th>
                                            <th>Domingo</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>Hora Inicio</td>
                                            <td>
                                                <label class="d-block">Fila: </label>
                                                <input type="number" min="1" @bind="rowT" class="form-control" style="width: 60px;" />
                                                <label class="d-block">Columna: </label>
                                                <input type="text" @bind="colTExcel" class="form-control" style="width: 60px;" maxlength="1" />
                                            </td>
                                            <td>@(rowT) - @(ConvertirColumnaALetra(ConvertirColumna(colTExcel) + 1))</td>
                                            <td>@(rowT) - @(ConvertirColumnaALetra(ConvertirColumna(colTExcel) + 2))</td>
                                            <td>@(rowT) - @(ConvertirColumnaALetra(ConvertirColumna(colTExcel) + 3))</td>
                                            <td>@(rowT) - @(ConvertirColumnaALetra(ConvertirColumna(colTExcel) + 4))</td>
                                            <td>@(rowT) - @(ConvertirColumnaALetra(ConvertirColumna(colTExcel) + 5))</td>
                                            <td>@(rowT) - @(ConvertirColumnaALetra(ConvertirColumna(colTExcel) + 6))</td>
                                        </tr>
                                        <tr>
                                            <td>Hora Fin</td>
                                            @for (int i = 0; i < 7; i++)
                                            {
                                                <td>@(rowT + 3) - @(ConvertirColumnaALetra(ConvertirColumna(colTExcel) + i))</td>
                                            }
                                        </tr>
                                    </tbody>
                                </table>
                                <!--FIN DE TABLA DE HORARIOS-->
                            </div>

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                        <!--<button type="button" class="btn btn-primary">Save changes</button>-->
                    </div>
                </div>
            </div>
        </div>

        
    }
</div>



<EditForm Model="newCurso">
    <div class="contenedor">
        <label for="nombrePeriodo" class="label">Nombre del Periodo:</label>
        <select id="nombrePeriodo" @bind="selectedPeriodo" class="select">
            <option value=0>Seleccione un periodo</option>
            @foreach (var periodo in listaPeriodos)
            {
                <option value="@periodo.id_lista_periodo">@periodo.nombre_periodo</option>
            }
        </select>
    </div>

    <div class ="contenedor">
        <label for="nombreCurso" class="label">Nombre del Curso:</label>
        <InputText id="nombreCurso" @bind-Value="@newPeriodocertificate" class="input-text"></InputText>
    </div>

        <div class="contenedor-botones">
        <button @onclick="(() => BuscarPeriodos(selectedPeriodo, newPeriodocertificate))" class="btn btn-primary btn-buscar">Buscar Curso</button>
        <!--<button @onclick="(() => ListaPeriodos())" type="button" class="btn btn-secondary btn-listar">Listar Todos los Cursos</button>-->
        </div>
</EditForm>

<table class="table table-striped table-resultado">
    <thead>
        <tr>
            <th scope="col">Nombre Periodo</th>
            <th scope="col">Inicio</th>
            <th scope="col">Fin</th>
            <th scope="col">Nombre Curso</th>
            <th scope="col">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var en in Periodos)
        {
            var inputFileId = $"fileInput_{en.id_periodo}";

            <tr>
                <td>@en.nombre_periodo</td>
                <td>@en.fecha_inicio_periodo</td>
                <td>@en.fecha_fin_periodo</td>
                <td>@en.nombre_curso</td>
                <td>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#ModalInstructores" @onclick="(() => LoadInstructoresAsync(1, 3, en.id_periodo))">
                        <i class=" bi bi-person-lines-fill"></i>
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

<div class="d-flex justify-content-between">
    <button @onclick="(() => BuscarPeriodos(selectedPeriodo, newPeriodocertificate, CurrentPage - 1))" class="btn btn-primary" disabled="@(CurrentPage == 1 || isLoading)">Anterior</button>
    <span>Página @CurrentPage de @TotalPages</span>
    <button @onclick="(() => BuscarPeriodos(selectedPeriodo, newPeriodocertificate, CurrentPage + 1))" class="btn btn-primary" disabled="@(CurrentPage == TotalPages || isLoading)">Siguiente</button>
</div>
<!-- Modal -->
<div class="modal fade" id="ModalInstructores" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Lista de instructores</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
@if (instructores == null)
{
    <p><em>Cargando...</em></p>
}
else if (!instructores.Any())
{
    <p>No hay instructores disponibles.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Cédula</th>
                <th scope="col">Nombre</th>
                <th scope="col">Apellidos</th>
                <th scope="col">Edad</th>
                <th scope="col">Correo</th>
                <th scope="col">Celular</th>
                <th scope="col">Teléfono</th>
                <th scope="col">Horas Ganadas</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var instructor in instructores)
            {
                <tr>
                    <td>@instructor.CedulaUsuario</td>
                    <td>@instructor.NombreUsuario</td>
                    <td>@instructor.ApellidosUsuario</td>
                    <td>@instructor.EdadUsuario</td>
                    <td>@instructor.CorreoUsuario</td>
                    <td>@instructor.CelularUsuario</td>
                    <td>@instructor.TelefonoUsuario</td>
                    <td>@instructor.TotalHorasGanadas</td>
                    <td>
                        <button type="button" class="btn btn-warning" @onclick="(()=> InsertTextsIntoExcel(instructor.NombreUsuario +' '+ instructor.ApellidosUsuario, instructor.CedulaUsuario, instructor.TotalHorasGanadas, instructor.Grupos.SelectMany(g => g.Horarios).ToList(), 1))">
                             Descargar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<div class="text-center">
    <button class="btn btn-primary" disabled="@IsFirstPage" @onclick="PreviousPage">Anterior</button>
    <span>Página @CurrentPageTut de @TotalPagesTut</span>
    <button class="btn btn-primary" disabled="@IsLastPage" @onclick="NextPage">Siguiente</button>
</div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-success" @onclick="(()=> ImprimirTodosInformesPracticas())">Descargar todos</button>
                    </div>
                </div>
            </div>
        </div>


<style>
    .titulo-resultado {
        text-align: center;
        color: #007bff;
        margin-bottom: 30px;
        font-size: 28px;
        font-weight: bold;
    }

    .contenedor {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

    .label {
        flex: 1;
        font-weight: bold;
        color: #333;
    }

    .select, .input-text {
        flex: 2;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
    }

    .contenedor-botones {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .btn-buscar {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-listar {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #6c757d;
        border-color: #6c757d;
    }

    .table-resultado {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

        .table-resultado th, .table-resultado td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table-resultado th {
            background-color: #f8f8f8;
            font-weight: bold;
        }

        .table-resultado td {
            color: #333;
        }

    .modal-title {
        font-size: 22px;
    }

    .info-modal {
        margin-bottom: 15px;
        font-size: 16px;
        color: #333;
    }
</style>

@code {
    /*inicio para valores de lista de cursios*/
    Curso newCurso = new Curso();
    private List<ListaPeriodo> listaPeriodos = [];
    public static List<PeriodoConNombreCurso> Periodos = new List<PeriodoConNombreCurso>();
    private int selectedPeriodo;
    string newPeriodocertificate;
    int generalid_periodo;
    /*fin para valores de lista de cursios*/
    private bool isLoading = false;
    private int rowT = 46;
    private string colTExcel = "B"; // Inicialmente "A", equivalente a columna 1 en Excel

    private List<InstructorDto> instructores = [];//lista de instructores para generar informes de prácticas
    private int CurrentPageTut = 1;//datos para paginación
    private int PageSize = 3; // Tamaño de página
    private int TotalCount { get; set; }

    private string uploadedFileName;
    private IBrowserFile file;
    private MemoryStream fileStream = new MemoryStream();

    private string text1, text2, text3;
    private int row1 = 20;
    private int row2 = 21;
    private int row3 = 51;
    private string col1Excel = "D";
    private string col2Excel = "D";
    private string col3Excel = "H";
    private int CurrentPage { get; set; } = 1;// propiedades para paginación
    private int TotalPages { get; set; }
    private int registerNumber { get; set; } = 3;

    protected override async Task OnInitializedAsync()
    {
        await ListaNombresPeriodos();
        await BuscarPeriodos(0, "", 1);
    }
    // Función para convertir número de columna a letra (1 = A, 2 = B, ...)
    private int ConvertirColumna(string letraColumna)
    {
        if (string.IsNullOrEmpty(letraColumna) || letraColumna.Length != 1 || !char.IsLetter(letraColumna[0]))
        {
            // Manejo de error o valor por defecto, si la entrada no es válida
            return 1; // Por ejemplo, podrías devolver 1 como valor por defecto o manejar un error
        }

        // Convertir la letra a un número de columna equivalente en Excel
        return char.ToUpper(letraColumna[0]) - 'A' + 1;
    }

    // Función para convertir número de columna a letra (1 = A, 2 = B, ...)
    private string ConvertirColumnaALetra(int numeroColumna)
    {
        // Validar que el número de columna esté dentro del rango
        if (numeroColumna < 1 || numeroColumna > 26)
        {
            return string.Empty; // Manejar el caso fuera de rango, si es necesario
        }

        // Convertir el número de columna a letra equivalente en Excel
        return ((char)('A' + numeroColumna - 1)).ToString();
    }
    private async Task LoadInstructoresAsync(int currentPage, int pageSize, int id_periodo)
    {
        isLoading = true;
        StateHasChanged();
        generalid_periodo = id_periodo;
        try
        {
            var response = await Http.GetFromJsonAsync<InstructoresPaginadosDto>(
                $"http://localhost:5117/api/Instructor/instructoresPracticas?pageIndex={currentPage}&pageSize={pageSize}&id_periodo={id_periodo}");

            if (response != null)
            {
                instructores = response.Instructores;
                TotalCount = response.TotalCount;
            }
        }
        catch (Exception ex)
        {
            isLoading = false;
            StateHasChanged();
            Console.WriteLine($"Error al cargar instructores: {ex.Message}");
            await sweetAletNotify("Error de servidor", "error");
            // Manejar el error según sea necesario
        }
        isLoading = false;
        StateHasChanged();
    }


    private async Task PreviousPage()//paginación: retroseder una pagina
    {
        if (CurrentPageTut > 1)
        {
            CurrentPageTut--;
            await LoadInstructoresAsync(CurrentPageTut, PageSize, generalid_periodo); // Pasar currentPage y pageSize actualizados
        }
    }

    private async Task NextPage()//paginación: ir a la siguiente pagina
    {
        if (CurrentPageTut < TotalPagesTut)
        {
            CurrentPageTut++;
            await LoadInstructoresAsync(CurrentPageTut, PageSize, generalid_periodo); // Pasar currentPage y pageSize actualizados
        }
    }

    private bool IsFirstPage => CurrentPageTut == 1;
    private bool IsLastPage => CurrentPageTut == TotalPagesTut;
    private int TotalPagesTut => (int)Math.Ceiling((decimal)TotalCount / PageSize); // Calcular el total de páginas

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        file = e.File;
        if (file != null)
        {
            uploadedFileName = file.Name;
            await file.OpenReadStream().CopyToAsync(fileStream);
            Console.WriteLine($"Nombre del archivo subido: {file.Name}");

        }
    }

    private async Task InsertTextsIntoExcel(string fullname, string CedulaUsuario, int TotalHorasGanadas, List<Horario> horarios, int alertmess)
    {
        isLoading = true;
        StateHasChanged();
        Console.WriteLine($"fullnameUser: {fullname}");
        Console.WriteLine($"Cedula Usuario: {CedulaUsuario}");
        Console.WriteLine($"Total Horas Ganadas: {TotalHorasGanadas}");
        try
        {
            foreach (var horario in horarios)
            {
                Console.WriteLine($"ID Horario: {horario.id_horario}");
                Console.WriteLine($"ID Grupo: {horario.id_grupo}");
                Console.WriteLine($"Día Semana: {horario.dia_semana}");
                Console.WriteLine($"Hora Inicio: {horario.hora_inicio}");
                Console.WriteLine($"Hora Fin: {horario.hora_fin}");
                Console.WriteLine("-------------------------------------");
            }
            // Diccionario para almacenar los horarios por día de la semana
            Dictionary<string, Horario> horariosPorDia = new Dictionary<string, Horario>
            {
                { "Lunes", new Horario() },
                { "Martes", new Horario() },
                { "Miercoles", new Horario() },
                { "Jueves", new Horario() },
                { "Viernes", new Horario() },
                { "Sabado", new Horario() },
                { "Domingo", new Horario() }
            };

            if (fileStream.Length > 0)
            {
                fileStream.Position = 0; // Reset the stream position
                using (var workbook = new XLWorkbook(fileStream))
                {
                    // Iterar sobre los horarios para llenar el diccionario
                    foreach (var horario in horarios)
                    {
                        string diaSemana = horario.dia_semana;

                        // Verificar si el día ya tiene horarios asignados
                        if (!horariosPorDia.ContainsKey(diaSemana))
                            horariosPorDia[diaSemana] = new Horario();

                        var horarioDia = horariosPorDia[diaSemana];

                        // Verificar y actualizar la hora de inicio si corresponde
                        if (horarioDia.hora_inicio == TimeSpan.Zero || horario.hora_inicio < horarioDia.hora_inicio)
                        {
                            horarioDia.hora_inicio = horario.hora_inicio;
                        }

                        // Verificar y actualizar la hora de fin si corresponde
                        if (horarioDia.hora_fin == TimeSpan.Zero || horario.hora_fin > horarioDia.hora_fin)
                        {
                            horarioDia.hora_fin = horario.hora_fin;
                        }
                    }
                    // Imprimir el contenido del diccionario
                    Console.WriteLine($"Imprimir el contenido del diccionario-------");
                    foreach (var kvp in horariosPorDia)
                    {
                        Console.WriteLine($"{kvp.Key}: HoraInicio = {kvp.Value.hora_inicio}, HoraFin = {kvp.Value.hora_fin}");
                    }

                    var worksheet = workbook.Worksheets.First();

                    //Insertar horario:
                    // Encabezados
                    int newcoltable = ColumnaExcelANumero(colTExcel);


                    int col = 0;
                    foreach (var kvp in horariosPorDia)
                    {
                        worksheet.Cell(rowT, newcoltable + col).Value = kvp.Value.hora_inicio.ToString(@"hh\:mm\:ss");
                        worksheet.Cell(rowT + 3, newcoltable + col).Value = kvp.Value.hora_fin.ToString(@"hh\:mm\:ss");
                        col++;
                    }

                    // Convertir columnas de Excel (letras) a números enteros
                    int col1 = ColumnaExcelANumero(col1Excel);
                    int col2 = ColumnaExcelANumero(col2Excel);
                    int col3 = ColumnaExcelANumero(col3Excel);

                    // Insertar textos en las celdas especificadas
                    if (!string.IsNullOrEmpty(fullname) && row1 > 0 && col1 > 0)
                        worksheet.Cell(row1, col1).Value = fullname;
                    if (!string.IsNullOrEmpty(CedulaUsuario) && row2 > 0 && col2 > 0)
                        worksheet.Cell(row2, col2).Value = CedulaUsuario;
                    if (row3 > 0 && col3 > 0)
                        worksheet.Cell(row3, col3).Value = TotalHorasGanadas;

                    using (var outputStream = new MemoryStream())
                    {
                        workbook.SaveAs(outputStream, new SaveOptions { ValidatePackage = false });
                        outputStream.Position = 0;

                        var nombreExcel = $"InformePractica_{fullname}_{DateTime.Now:yyyyMMdd_HHmmss}.xlsm";

                        await JSRuntime.InvokeVoidAsync(
                            "DescargarExelnuevo",
                            nombreExcel,
                            Convert.ToBase64String(outputStream.ToArray())
                        );
                    }
                }
                isLoading = false;
                StateHasChanged();
                if (alertmess == 1)
                {
                    await sweetAletNotify("Archivo descargado exitosamente.", "success");
                }
            }
            else
            {
                isLoading = false;
                StateHasChanged();
                //await JSRuntime.InvokeVoidAsync("alert", "No tiene un archivo cargado");
                await sweetAletNotify("No tiene un archivo cargado", "info");
            }
        }
        catch (Exception ex)
        {
            isLoading = false;
            StateHasChanged();
            Console.WriteLine($"Error al insertar textos en el archivo Excel: {ex.Message}");
            await sweetAletNotify($"Error al descargar el archivo de {fullname}", "error");
            // Manejo de errores aquí
        }
    }
    private async Task ImprimirTodosInformesPracticas()
    {
        int currentPage = 1;
        int pageSize = 3;  // Asumo que el tamaño de página es 3. Puedes ajustar este valor si es necesario.

        while (currentPage <= TotalPagesTut)
        {
            // Cargar los instructores de la página actual
            await LoadInstructoresAsync(currentPage, pageSize, generalid_periodo);

            foreach (var instructor in instructores)
            {
                await InsertTextsIntoExcel(
                    instructor.NombreUsuario + ' ' + instructor.ApellidosUsuario,
                    instructor.CedulaUsuario,
                    instructor.TotalHorasGanadas,
                    instructor.Grupos.SelectMany(g => g.Horarios).ToList(),
                    2
                );
            }

            // Incrementar la página actual
            currentPage++;
        }

        await sweetAletNotify("Los archivos se han descargado exitosamente.", "success");
    }


    // Función para convertir letra de columna Excel a número
    private int ColumnaExcelANumero(string columna)
    {
        if (string.IsNullOrEmpty(columna))
            return 0;

        columna = columna.ToUpperInvariant();
        int resultado = 0;
        foreach (char c in columna)
        {
            resultado = resultado * 26 + (c - 'A' + 1);
        }
        return resultado;
    }

    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }
    //FUNCIONES PARA Periodo
    public async Task ListaPeriodos()
    {
        isLoading = true;
        StateHasChanged();
        Periodos = await Http.GetFromJsonAsync<List<PeriodoConNombreCurso>>("http://localhost:5117/api/Periodo");
        isLoading = false;
        StateHasChanged();
    }
    public async Task BuscarPeriodos(int id_lista_periodo, string nombre_curso, int pageNumber = 1)
    {
        try
        {
            if (pageNumber < 1 || (TotalPages > 0 && pageNumber > TotalPages))
            {
                return;
            }

            isLoading = true;
            StateHasChanged();

            var url = $"http://localhost:5117/api/Periodo/PeriodoByName?id_lista_periodo={id_lista_periodo}&nombre_curso={nombre_curso}&pageNumber={pageNumber}&pageSize={registerNumber}";
            var response = await Http.GetAsync(url);

            isLoading = false;
            StateHasChanged();

            if (response.IsSuccessStatusCode)
            {
                var pagedResult = await response.Content.ReadFromJsonAsync<PagedResult<PeriodoConNombreCurso>>();
                Periodos = pagedResult.Items;
                TotalPages = pagedResult.TotalPages;
                CurrentPage = pagedResult.CurrentPage;

                if (Periodos == null || Periodos.Count == 0)
                {
                    await sweetAletNotify("No se encontraron coincidencias", "info");
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                await sweetAletNotify("No se encontraron coincidencias", "info");
                Periodos = new List<PeriodoConNombreCurso>();
            }
            else
            {
                await sweetAletNotify("Error al buscar los periodos", "error");
            }
        }
        catch (Exception ex)
        {
            // Maneja la excepción, por ejemplo, registrándola o mostrando un mensaje de error
            Console.WriteLine($"Error al buscar los periodos: {ex.Message}");
            await sweetAletNotify("Error al buscar los periodos", "error");

            // Puedes asignar Periodos a una lista vacía en caso de error
            Periodos = new List<PeriodoConNombreCurso>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    //FUNCIONES PARA Periodo
    public async Task ListaNombresPeriodos()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Intenta obtener la lista de periodos
            listaPeriodos = await Http.GetFromJsonAsync<List<ListaPeriodo>>("http://localhost:5117/api/Periodo/getNamePeriodoList");
        }
        catch (Exception ex)
        {
            // Maneja la excepción, por ejemplo, registrándola o mostrando un mensaje de error
            Console.WriteLine($"Error al obtener la lista de periodos: {ex.Message}");

            // Puedes asignar listaPeriodos a una lista vacía en caso de error
            listaPeriodos = new List<ListaPeriodo>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
    public class PagedResult<T>
    {
        public List<T> Items { get; set; }
        public int TotalPages { get; set; }
        public int CurrentPage { get; set; }
    }

}