@inject NavigationManager NavigationManager
@page "/informe-practicas"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml;
@using ClosedXML.Excel;
@using System.IO

<h2>Generar informes de prácticas profecionales</h2><br />

<h3>Subir Archivo Excel</h3>

<br />
<div>
    <label class="btn btn-success">
        <i class="bi bi-file-earmark-spreadsheet-fill"></i>
        <InputFile OnChange="HandleFileSelected" class="d-none" accept=".xls,.xlsx,.xlsm" />
    </label>
    @if (!string.IsNullOrEmpty(uploadedFileName))
    {
        <div class="mt-2 alert alert-info">
            Archivo subido: @uploadedFileName
        </div>
        <div class="mt-3">
            <h5>Especificar posiciones y textos para insertar:</h5>
            <div class="form-group">
                <label>Texto 1:</label>
                <input type="text" @bind="text1" class="form-control" />
                <label>Fila 1:</label>
                <input type="number" @bind="row1" class="form-control" />
                <label>Columna 1(A-Z):</label>
                <input type="text" @bind="col1Excel" class="form-control" />
            </div>
            <div class="form-group">
                <label>Texto 2:</label>
                <input type="text" @bind="text2" class="form-control" />
                <label>Fila 2:</label>
                <input type="number" @bind="row2" class="form-control" />
                <label>Columna 2(A-Z):</label>
                <input type="text" @bind="col2Excel" class="form-control" />
            </div>
            <div class="form-group">
                <label>Texto 3:</label>
                <input type="text" @bind="text3" class="form-control" />
                <label>Fila 3:</label>
                <input type="number" @bind="row3" class="form-control" />
                <label>Columna 3(A-Z):</label>
                <input type="text" @bind="col3Excel" class="form-control" />
            </div>
            <button class="btn btn-primary" @onclick="InsertTextsIntoExcel">Insertar Textos</button>
        </div>
    }
</div>


@code {
    private string uploadedFileName;
    private IBrowserFile file;
    private MemoryStream fileStream = new MemoryStream();

    private string text1, text2, text3;
    private int row1, col1, row2, col2, row3, col3;
    private string col1Excel, col2Excel, col3Excel;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        file = e.File;
        if (file != null)
        {
            uploadedFileName = file.Name;
            await file.OpenReadStream().CopyToAsync(fileStream);
            Console.WriteLine($"Nombre del archivo subido: {file.Name}");

        }
    }

    private async Task InsertTextsIntoExcel()
    {
        try
        {
            if (fileStream.Length > 0)
            {
                fileStream.Position = 0; // Reset the stream position
                using (var workbook = new XLWorkbook(fileStream))
                {
                    var worksheet = workbook.Worksheets.First();

                    // Convertir columnas de Excel (letras) a números enteros
                    int col1 = ColumnaExcelANumero(col1Excel);
                    int col2 = ColumnaExcelANumero(col2Excel);
                    int col3 = ColumnaExcelANumero(col3Excel);

                    // Insertar textos en las celdas especificadas
                    if (!string.IsNullOrEmpty(text1) && row1 > 0 && col1 > 0)
                        worksheet.Cell(row1, col1).Value = text1;
                    if (!string.IsNullOrEmpty(text2) && row2 > 0 && col2 > 0)
                        worksheet.Cell(row2, col2).Value = text2;
                    if (!string.IsNullOrEmpty(text3) && row3 > 0 && col3 > 0)
                        worksheet.Cell(row3, col3).Value = text3;

                    using (var outputStream = new MemoryStream())
                    {
                        workbook.SaveAs(outputStream);
                        outputStream.Position = 0;

                        var nombreExcel = string.Concat("Reporte", DateTime.Now.ToString("yyyyMMdd_HHmmss"), ".xlsx");

                        await JSRuntime.InvokeVoidAsync(
                            "DescargarExelnuevo",
                            nombreExcel,
                            Convert.ToBase64String(outputStream.ToArray())
                        );
                    }
                }

                Console.WriteLine("Textos insertados en el archivo Excel y archivo descargado correctamente.");
            }
            else
            {
                Console.WriteLine("El archivo subido está vacío.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al insertar textos en el archivo Excel: {ex.Message}");
            // Manejo de errores aquí
        }
    }

    // Función para convertir letra de columna Excel a número
    private int ColumnaExcelANumero(string columna)
    {
        if (string.IsNullOrEmpty(columna))
            return 0;

        columna = columna.ToUpperInvariant();
        int resultado = 0;
        foreach (char c in columna)
        {
            resultado = resultado * 26 + (c - 'A' + 1);
        }
        return resultado;
    }

}