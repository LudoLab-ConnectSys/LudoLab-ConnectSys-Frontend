@page "/todas-encuestas"
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
@layout AdminLayout
@inject IConfiguration Configuration

<div class="contenedor-botones">
    <button @onclick="NavigateBack" class="btn btn-secondary btn-regresar">Regresar</button>
</div>
@if (isLoading)
{
    <Spinner />
}
<h1 class="titulo-resultado">Encuestas</h1>

<button class="btn-ver" data-bs-toggle="modal" data-bs-target="#crearEncuestaModal" >Crear Encuesta</button>
<div class="contenedor">
    @if (encuestas == null)
    {
        <p>Cargando encuestas...</p>
    }
    else if (encuestas.Count == 0)
    {
        <p>No hay encuestas disponibles.</p>
    }
    else
    {
        <table class="table table-striped table-resultado">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Título</th>
                    <th>Fecha de Creación</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var encuesta in encuestas)
                {
                    <tr>
                        <td>@encuesta.id_encuesta</td>
                        <td>@encuesta.titulo</td>
                        <td>@encuesta.fecha_creacion.ToString("dd/MM/yyyy")</td>
                        <td class="contenedor-botones">
                            <button class="btn-ver" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="() => VerEncuesta(encuesta.id_encuesta)">Ver</button>
                            <button class="btn-editar" data-bs-toggle="modal" data-bs-target="#editarpreguntasModal" @onclick="() => VerEncuesta(encuesta.id_encuesta)">Editar</button>
                            <button class="btn-eliminar" @onclick="() => EliminarEncuesta(encuesta.id_encuesta)">Eliminar</button><!---->
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>
<!-- Modal para lista de preguntas de una encuesta-->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Preguntas de la Encuesta</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                <ul>
                    @foreach (var pregunta in preguntasOpciones)
                    {
                        <li>
                            <strong>@pregunta.TextoPregunta</strong>
                            <ul>
                                @foreach (var opcion in pregunta.Opciones)
                                {
                                    <li>@opcion.Texto - Valor: @opcion.Valor</li>
                                }
                            </ul>
                        </li>
                    }
                </ul>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal para editar preguntas de una encuesta-->
<div class="modal fade" id="editarpreguntasModal" tabindex="-1" aria-labelledby="editarModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="editarModalLabel">Editar Preguntas de la Encuesta</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body">
                @if (preguntasOpciones == null)
                {
                    <p>Cargando preguntas...</p>
                }
                else if (preguntasOpciones.Count == 0)
                {
                    <p>No hay preguntas disponibles para editar.</p>
                }
                else
                {
                    <form>
                        @foreach (var pregunta in preguntasOpciones)
                        {
                            <div class="form-group">
                                <div class="container-questions">
                                    <label for="pregunta_@pregunta.IdPregunta">Pregunta: </label>
                                    <input type="text" class="form-control" id="pregunta_@pregunta.IdPregunta" @bind="pregunta.TextoPregunta" />

                                </div>

                                <ul>
                                    @foreach (var opcion in pregunta.Opciones)
                                    {
                                        <li>
                                            <div class="form-group">
                                                <label for="opcion_@opcion.Texto">@opcion.Texto</label>
                                                <input type="text" class="form-control" id="opcion_@opcion.Texto" @bind="opcion.Texto" />
                                                <input type="number" min="1" class="form-control" @bind="opcion.Valor" />
                                            </div>
                                        </li>
                                    }
                                </ul>
                            </div><br/>
                        }
                    </form>
                }
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="() => EditarEncuesta(id_pregunta)">Guardar Cambios</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal para crear nueva encuesta -->
<div class="modal fade" id="crearEncuestaModal" tabindex="-1" aria-labelledby="crearEncuestaModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="crearEncuestaModalLabel">Crear Nueva Encuesta</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form @onsubmit="CrearEncuesta">
                    <div class="mb-3">
                        <label for="titulo" class="form-label">Título de la Encuesta</label>
                        <input type="text" class="form-control" id="titulo" @bind="titulo" required />
                    </div>
                    <div id="preguntas-container">
                        @for (int i = 0; i < preguntasNew.Count; i++)
                        {
                            var preguntaIndex = i;  // Capturar el índice actual de la pregunta

                            <div class="card mb-4">
                                <div class="card-body">
                                    <div class="input-group mb-3">
                                        <input type="text" class="form-control" @bind="preguntasNew[preguntaIndex].TextoPregunta" placeholder="Pregunta" required />
                                        <button type="button" class="btn btn-danger" @onclick="() => EliminarPregunta(preguntaIndex)">x</button>
                                    </div>

                                    <div class="ml-4">
                                        @for (int j = 0; j < preguntasNew[preguntaIndex].Opciones.Count; j++)
                                        {
                                            var opcionIndex = j; // Capturar el índice actual de la opción
                                            <div class="input-group mb-3">
                                                <input type="text" class="form-control" placeholder="Texto de Opción" @oninput="(e) => UpdateOpcionTexto(preguntaIndex, opcionIndex, e.Value.ToString())" />
                                                <input type="number" min="1" class="form-control" placeholder="Valor de Opción" @oninput="(e) => UpdateOpcionValor(preguntaIndex, opcionIndex, Convert.ToInt32(e.Value))" />
                                                <button type="button" class="btn btn-danger" @onclick="() => EliminarOpcion(preguntaIndex, j)">x</button>
                                            </div>
                                        }
                                        <button type="button" class="btn btn-secondary mb-3" @onclick="() => AgregarOpcion(preguntaIndex)">Agregar Opción</button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    <button type="button" class="btn btn-primary" @onclick="AgregarPregunta">Agregar Pregunta</button>
                    <button type="submit" class="btn btn-success">Crear Encuesta</button>
                </form>


            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<style>
    .container-questions{
        display: flex;
    }
    .titulo-resultado {
        text-align: center;
        color: #333;
        margin-bottom: 10px;
        font-size: 2em;
    }

    .contenedor {
        width: 100%;
        margin: 0 auto;
    }

    .table-resultado {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

        .table-resultado th, .table-resultado td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table-resultado th {
            background-color: #f4f4f4;
        }

    .contenedor-botones {
        display: flex;
        gap: 10px;
    }

    .btn-ver, .btn-editar, .btn-eliminar {
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn-ver {
        background-color: #5bc0de;
        color: white;
    }

    .btn-editar {
        background-color: #f0ad4e;
        color: white;
    }

    .btn-eliminar {
        background-color: #d9534f;
        color: white;
    }

        .btn-ver:hover, .btn-editar:hover, .btn-eliminar:hover {
            opacity: 0.8;
        }

    .btn-regresar {
        background-color: #6c757d;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        cursor: pointer;
        margin-top: 20px;
    }

        .btn-regresar:hover {
            opacity: 0.8;
        }

    ul {
        list-style-type: none;
        padding: 0;
    }

    li {
        margin: 5px 0;
        padding: 5px;
        background-color: #f4f4f4;
        border-radius: 5px;
    }

    .modal-body {
        padding: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input {
            width: 100%;
            padding: 10px;
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: 14px;
        }

            .form-group input:focus {
                border-color: #80bdff;
                outline: none;
                box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
            }

    .input-group {
        margin-bottom: 15px;
    }

        .input-group .btn-danger {
            margin-left: 10px;
        }
</style>
@code {
    private List<Encuesta> encuestas = new();
    private List<Pregunta> preguntas = new();
    private List<PreguntaConOpciones> preguntasOpciones = new();
    private int id_pregunta;
    private bool isLoading = false;
    private string titulo = string.Empty;
    private List<PreguntaModel> preguntasNew = new() { new PreguntaModel() };

    private string _baseUrl;

    protected override async Task OnInitializedAsync()
    {
        _baseUrl = Configuration["BaseUrl"];
        isLoading = true;
        StateHasChanged();
        try
        {
            encuestas = await Http.GetFromJsonAsync<List<Encuesta>>($"{_baseUrl}/api/Encuesta/GetTodaEncuesta");
            isLoading = false;
            StateHasChanged();
            if (encuestas == null)
            {// Manejar el caso en que no se obtienen encuestas
                await sweetAletNotify("No se encontraron encuestas.", "warning");
            }
        }
        catch (HttpRequestException httpEx)
        {// Manejar errores específicos de la solicitud HTTP
            Console.WriteLine($"Error al obtener encuestas: {httpEx.Message}");
        }
        catch (Exception ex)
        {// Manejar errores generales
            Console.WriteLine($"Error inesperado: {ex.Message}");
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task VerEncuesta(int id)
    {
        isLoading = true;
        StateHasChanged();
        try
        {
            id_pregunta = id;
            preguntasOpciones = new();
            preguntasOpciones = await Http.GetFromJsonAsync<List<PreguntaConOpciones>>($"{_baseUrl}/api/Encuesta/preguntasporID/{id}");
            isLoading = false;
            StateHasChanged();
            if (preguntasOpciones == null || !preguntasOpciones.Any())
            {
                await sweetAletNotify("No se encontraron preguntas para esta encuesta.", "warning");
            }
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"Error al obtener preguntas: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error inesperado: {ex.Message}");
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task EditarEncuesta(int id)
    {
        try
        {
            var options = new
            {
                Title = "¿Está seguro de querer editar esta encuesta?",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Sí",
                CancelButtonText = "No"
            };
            var result = await JSRuntime.InvokeAsync<bool>("FireSweetAlertConfirm", options);
            if (!result)
            {
                return; // Termina la ejecución de la función si el usuario selecciona "No"
            }
            isLoading = true;
            StateHasChanged();

            var response = await Http.PutAsJsonAsync($"{_baseUrl}/api/Encuesta/ActualizarPreguntas/{id}", preguntasOpciones);
            isLoading = false;
            StateHasChanged();
            if (response.IsSuccessStatusCode)
            {
                // Éxito al guardar los cambios
                await sweetAletNotify("Cambios guardados exitosamente.", "success");
            }
            else
            {
                // Manejar errores de la API
                await sweetAletNotify("Error al guardar los cambios.", "error");
            }
        }
        catch (Exception ex)
        {
            // Manejar excepciones
            Console.WriteLine($"Error: {ex.Message}");
        }
        isLoading = false;
        StateHasChanged();
    }

    private async Task EliminarEncuesta(int id)
    {
        try
        {
            // Confirmar la eliminación con el usuario
            var options = new
            {
                Title = "¿Está seguro de eliminar esta encuesta?",
                Icon = "warning",
                ShowCancelButton = true,
                ConfirmButtonText = "Sí",
                CancelButtonText = "No"
            };
            var result = await JSRuntime.InvokeAsync<bool>("FireSweetAlertConfirm", options);
            if (!result)
            {
                return; // Termina la ejecución si el usuario selecciona "No"
            }

            // Eliminar las opciones asociadas
            isLoading = true;
            StateHasChanged();
            var eliminarOpcionesResponse = await Http.DeleteAsync($"{_baseUrl}/api/Encuesta/EliminarOpciones/{id}");
            if (!eliminarOpcionesResponse.IsSuccessStatusCode)
            {
                await sweetAletNotify("No se pudo eliminar las opciones asociadas a la encuesta.", "error");
                return;
            }

            // Eliminar las preguntas asociadas
            var eliminarPreguntasResponse = await Http.DeleteAsync($"{_baseUrl}/api/Encuesta/EliminarPreguntas/{id}");
            if (!eliminarPreguntasResponse.IsSuccessStatusCode)
            {
                await sweetAletNotify("No se pudo eliminar las preguntas asociadas a la encuesta.", "error");
                return;
            }

            // Finalmente eliminar la encuesta
            var eliminarEncuestaResponse = await Http.DeleteAsync($"{_baseUrl}/api/Encuesta/EliminarEncuesta/{id}");
            isLoading = false;
            StateHasChanged();

            if (eliminarEncuestaResponse.IsSuccessStatusCode)
            {
                // Manejar éxito
                await sweetAletNotify("Encuesta eliminada exitosamente.", "success");
                // Actualizar la lista de encuestas
                encuestas = await Http.GetFromJsonAsync<List<Encuesta>>($"{_baseUrl}/api/Encuesta/GetTodaEncuesta");
            }
            else
            {
                // Manejar errores
                await sweetAletNotify("Error al eliminar la encuesta.", "error");
            }
        }
        catch (Exception ex)
        {
            // Manejar excepciones
            Console.WriteLine($"Error: {ex.Message}");
            await sweetAletNotify("Error al eliminar la encuesta.", "error");
        }
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/resultados-encuestas"); // Reemplaza "/ruta-anterior" con la URL de la página anterior
    }
    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }
    /*------------------------------------- Crear encuestas -------------------------------------*/
    private void AgregarPregunta()
    {
        preguntasNew.Add(new PreguntaModel { TextoPregunta = string.Empty });
        StateHasChanged();
    }

    private void EliminarPregunta(int index)
    {
        preguntasNew.RemoveAt(index);
        StateHasChanged(); // Forzar renderizado
    }

    private void UpdatePreguntaTexto(int index, string texto)
    {
        preguntasNew[index - 1].TextoPregunta = texto;
        StateHasChanged();
    }
    private void AgregarOpcion(int preguntaIndex)
    {
        Console.WriteLine($"preguntaIndex: {preguntaIndex}");
        preguntasNew[preguntaIndex].Opciones.Add(new OpcionModel { Texto = string.Empty, Valor = 0 });
        //StateHasChanged(); // Forzar renderizado
    }

    private void EliminarOpcion(int preguntaIndex, int opcionIndex)
    {
        Console.WriteLine($"EliminarOpcion - preguntaIndex: {preguntaIndex}, opcionIndex: {opcionIndex}");

            preguntasNew[preguntaIndex].Opciones.RemoveAt(opcionIndex-1);
            StateHasChanged(); // Forzar renderizado
    }


    private void UpdateOpcionTexto(int preguntaIndex, int opcionIndex, string nuevoTexto)
    {
        Console.WriteLine($"UpdateOpcionTexto - preguntaIndex: {preguntaIndex}, opcionIndex: {opcionIndex}, nuevoTexto: {nuevoTexto}");
            preguntasNew[preguntaIndex].Opciones[opcionIndex].Texto = nuevoTexto;
            StateHasChanged(); // Forzar renderizado
    }

    private void UpdateOpcionValor(int preguntaIndex, int opcionIndex, int nuevoValor)
    {
        Console.WriteLine($"UpdateOpcionValor - preguntaIndex: {preguntaIndex}, opcionIndex: {opcionIndex}, nuevoValor: {nuevoValor}");
            preguntasNew[preguntaIndex].Opciones[opcionIndex].Valor = nuevoValor;
            StateHasChanged(); // Forzar renderizado
    }

    private async Task CrearEncuesta()
    {
        // Eliminar preguntas vacías
        var preguntasValidas = preguntasNew.Where(p => !string.IsNullOrWhiteSpace(p.TextoPregunta)).ToList();

        // Verificar que al menos haya una pregunta
        if (!preguntasValidas.Any())
        {
            await sweetAletNotify("La encuesta debe tener al menos una pregunta.", "warning");
            return; // Terminar la ejecución si no hay preguntas válidas
        }

        var encuesta = new EncuestaConPreguntasModel
            {
                Titulo = titulo,
                Preguntas = preguntasValidas
            };

        // Imprimir lo que se va a enviar al backend
        var json = System.Text.Json.JsonSerializer.Serialize(encuesta);
        Console.WriteLine(json);

        try
        {
            var options = new
            {
                Title = "¿Está seguro de crear esta encuesta?",
                Icon = "question",
                ShowCancelButton = true,
                ConfirmButtonText = "Sí",
                CancelButtonText = "No"
            };
            var result = await JSRuntime.InvokeAsync<bool>("FireSweetAlertConfirm", options);
            if (!result)
            {
                return; // Termina la ejecución de la función si el usuario selecciona "No"
            }

            isLoading = true;
            StateHasChanged();

            var response = await Http.PostAsJsonAsync($"{_baseUrl}/api/Encuesta/CrearEncuesta", encuesta);
            isLoading = false;
            StateHasChanged();

            encuestas = await Http.GetFromJsonAsync<List<Encuesta>>($"{_baseUrl}/api/Encuesta/GetTodaEncuesta");

            if (response.IsSuccessStatusCode)
            {
                await sweetAletNotify("Encuesta creada exitosamente.", "success");
                await JSRuntime.InvokeVoidAsync("$('#crearEncuestaModal').modal('hide')");
                ResetForm();
            }
            else
            {
                await sweetAletNotify("Error al crear la encuesta.", "error");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        isLoading = false;
        StateHasChanged();
    }

    // Modelo para la solicitud de creación de encuesta con preguntas y opciones
    public class EncuestaConPreguntasModel
    {
        public string Titulo { get; set; }
        public List<PreguntaModel> Preguntas { get; set; } = new List<PreguntaModel>();
    }

    // Modelo para Pregunta con Opciones
    public class PreguntaModel
    {
        public string TextoPregunta { get; set; }
        public List<OpcionModel> Opciones { get; set; } = new List<OpcionModel>();
    }

    // Modelo para Opción
    public class OpcionModel
    {
        public string Texto { get; set; }
        public int Valor { get; set; }
    }
    private void ResetForm()
    {
        titulo = string.Empty;
        preguntasNew.Clear();
        preguntasNew.Add(new PreguntaModel { TextoPregunta = string.Empty });
        StateHasChanged(); // Forzar renderizado
    }
    public class OpcionDto
    {
        public string Texto { get; set; }
        public int Valor { get; set; }
    }

    public class PreguntaConOpciones
    {
        public int IdPregunta { get; set; }
        public string TextoPregunta { get; set; }
        public List<OpcionDto> Opciones { get; set; }
    }
}
