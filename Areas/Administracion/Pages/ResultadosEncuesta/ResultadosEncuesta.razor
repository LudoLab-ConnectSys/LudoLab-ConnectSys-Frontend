@inject NavigationManager NavigationManager
@page "/resultados-encuestas"
@using System.Net.Http.Headers
@using DirectorioDeArchivos.Shared
@inject HttpClient Http
@using CurrieTechnologies.Razor.SweetAlert2
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@using OfficeOpenXml;
@using ClosedXML.Excel;
@using OfficeOpenXml;

<h2 class="titulo-resultado">Resultados de Encuesta de Satisfacción</h2>

<EditForm Model="newCurso">
    <div class="contenedor">
        <label for="nombrePeriodo" class="label">Nombre del Periodo:</label>
        <select id="nombrePeriodo" @bind="selectedPeriodo" class="select">
            <option value=0>Seleccione un periodo</option>
            @foreach (var periodo in listaPeriodos)
            {
                <option value="@periodo.id_lista_periodo">@periodo.nombre_periodo</option>
            }
        </select>
    </div>
    <div class="contenedor">
        <label for="nombreCurso" class="label">Nombre del Curso:</label>
        <InputText id="nombreCurso" @bind-Value="@newPeriodocertificate" class="input-text"></InputText>
    </div>
    <div class="contenedor-botones">
        <button @onclick="(() => BuscarPeriodos(selectedPeriodo, newPeriodocertificate))" class="btn btn-primary btn-buscar">Buscar Curso</button>
        <!--<button @onclick="(() => ListarPeriodos())" type="button" class="btn btn-secondary btn-listar">Listar Todos los Cursos</button>-->
        <button @onclick="NavigateToEncuestas" class="btn btn-info btn-ver-encuestas">Ver Encuestas</button>
    </div>

</EditForm>

<table class="table table-striped table-resultado">
    <thead>
        <tr>
            <th>Nombre Periodo</th>
            <th>Inicio</th>
            <th>Fin</th>
            <th>Nombre Curso</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var en in Periodos)
        {
            <tr>
                <td>@en.nombre_periodo</td>
                <td>@en.fecha_inicio_periodo</td>
                <td>@en.fecha_fin_periodo</td>
                <td>@en.nombre_curso</td>
                <td>
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" @onclick="(() => OntenerEncuestas(en.id_periodo, en.nombre_curso))">
                        Descargar
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="d-flex justify-content-between">
    <button @onclick="(() => BuscarPeriodos(selectedPeriodo, newPeriodocertificate, CurrentPage - 1))" class="btn btn-primary" disabled="@(CurrentPage == 1 || isLoading)">Anterior</button>
    <span>Página @CurrentPage de @TotalPages</span>
    <button @onclick="(() => BuscarPeriodos(selectedPeriodo, newPeriodocertificate, CurrentPage + 1))" class="btn btn-primary" disabled="@(CurrentPage == TotalPages || isLoading)">Siguiente</button>
</div>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Descargar resultados de Encuestas</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="encuesta-list">
                    <div class="encuesta-grid">
                        @foreach (var encuesta in encuestas)
                        {
                            <div class="encuesta-card" @onclick="() => ImprimirResultadosEncuestas(encuesta.id_encuesta)">
                                <h4>@encuesta.titulo</h4>
                                <p>Fecha de Creación: @encuesta.fecha_creacion.ToShortDateString()</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

<style>
    .titulo-resultado {
        text-align: center;
        color: #007bff;
        margin-bottom: 30px;
        font-size: 28px;
        font-weight: bold;
    }

    .contenedor {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

    .label {
        flex: 1;
        font-weight: bold;
        color: #333;
    }

    .select, .input-text {
        flex: 2;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        font-size: 16px;
    }

    .contenedor-botones {
        display: flex;
        gap: 10px;
        margin-top: 20px;
    }

    .btn-ver-encuestas {
        background-color: #5bc0de;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        cursor: pointer;
    }

        .btn-ver-encuestas:hover {
            opacity: 0.8;
        }


    .btn-buscar {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #007bff;
        border-color: #007bff;
    }

    .btn-listar {
        padding: 10px 20px;
        font-size: 16px;
        background-color: #6c757d;
        border-color: #6c757d;
    }

    .table-resultado {
        width: 100%;
        margin-top: 20px;
        border-collapse: collapse;
    }

        .table-resultado th, .table-resultado td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }

        .table-resultado th {
            background-color: #f8f8f8;
            font-weight: bold;
        }

        .table-resultado td {
            color: #333;
        }

    .modal-title {
        font-size: 22px;
    }

    .encuesta-list {
        padding: 20px;
    }

    .encuesta-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
    }

    .encuesta-card {
        background-color: #ffffff;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        cursor: pointer;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

        .encuesta-card:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .encuesta-card h4 {
            margin-bottom: 8px;
            font-size: 18px;
            color: #333;
            font-weight: 600;
        }

        .encuesta-card p {
            font-size: 14px;
            color: #666;
        }
</style>


@code {
    Curso newCurso = new Curso();
    private bool isLoading = false;
    private List<ListaPeriodo> listaPeriodos = [];
    private int selectedPeriodo;
    string newPeriodocertificate;

    List<Encuesta> encuestas = new List<Encuesta>();//Lista de encuestas
    int idPeriodoF;
    String nombreCurso;

    public static List<PeriodoConNombreCurso> Periodos = new List<PeriodoConNombreCurso>();
    //private SumatoriaRespuestasModel sumatoriaRespuestas = new SumatoriaRespuestasModel();// resultado de encuestas
    private int CurrentPage { get; set; } = 1;// propiedades para paginación
    private int TotalPages { get; set; }
    private int registerNumber { get; set; } = 3;


    protected override async Task OnInitializedAsync()
    {
        await ListaNombresPeriodos();
        await BuscarPeriodos(0, "", 1);
    }

    //FUNCIONES PARA obtener Periodos
    public async Task ListaNombresPeriodos()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            // Intenta obtener la lista de periodos
            listaPeriodos = await Http.GetFromJsonAsync<List<ListaPeriodo>>("http://localhost:5117/api/Periodo/getNamePeriodoList");
        }
        catch (Exception ex)
        {
            // Maneja la excepción, por ejemplo, registrándola o mostrando un mensaje de error
            Console.WriteLine($"Error al obtener la lista de periodos: {ex.Message}");

            // Puedes asignar listaPeriodos a una lista vacía en caso de error
            listaPeriodos = new List<ListaPeriodo>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    public async Task BuscarPeriodos(int id_lista_periodo, string nombre_curso, int pageNumber = 1)
    {
        try
        {
            if (pageNumber < 1 || (TotalPages > 0 && pageNumber > TotalPages))
            {
                return;
            }

            isLoading = true;
            StateHasChanged();

            var url = $"http://localhost:5117/api/Periodo/PeriodoByName?id_lista_periodo={id_lista_periodo}&nombre_curso={nombre_curso}&pageNumber={pageNumber}&pageSize={registerNumber}";
            var response = await Http.GetAsync(url);

            isLoading = false;
            StateHasChanged();

            if (response.IsSuccessStatusCode)
            {
                var pagedResult = await response.Content.ReadFromJsonAsync<PagedResult<PeriodoConNombreCurso>>();
                Periodos = pagedResult.Items;
                TotalPages = pagedResult.TotalPages;
                CurrentPage = pagedResult.CurrentPage;

                if (Periodos == null || Periodos.Count == 0)
                {
                    await sweetAletNotify("No se encontraron coincidencias", "info");
                }
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                await sweetAletNotify("No se encontraron coincidencias", "info");
                Periodos = new List<PeriodoConNombreCurso>();
            }
            else
            {
                await sweetAletNotify("Error al buscar los periodos", "error");
            }
        }
        catch (Exception ex)
        {
            // Maneja la excepción, por ejemplo, registrándola o mostrando un mensaje de error
            Console.WriteLine($"Error al buscar los periodos: {ex.Message}");
            await sweetAletNotify("Error al buscar los periodos", "error");

            // Puedes asignar Periodos a una lista vacía en caso de error
            Periodos = new List<PeriodoConNombreCurso>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    //FUNCIONES PARA ontener Periodos de cursos
    public async Task ListarPeriodos()
    {
        isLoading = true;
        StateHasChanged();
        Periodos = await Http.GetFromJsonAsync<List<PeriodoConNombreCurso>>("http://localhost:5117/api/Periodo");
        isLoading = false;
        StateHasChanged();
    }


    private async Task ImprimirResultadosEncuestas(int id_encuesta)
    {
        ExcelPackage.LicenseContext = LicenseContext.NonCommercial;
        //Console.WriteLine($"PERIODO LLAMADO {idPeriodoF} && {id_encuesta}");
        try
        {
            isLoading = true;
            StateHasChanged();
            var response = await Http.GetAsync($"http://localhost:5117/api/Encuesta/SumatoriaRespuestasPorPeriodo?idPeriodoF={idPeriodoF}&id_encuesta={id_encuesta}");
            isLoading = false;
            StateHasChanged();
            await sweetAletNotify("Resultados de la encuesta descargados exitosamente.", "success");

            if (response.IsSuccessStatusCode)
            {
                // Deserializar la respuesta en el modelo tipado
                var data = await response.Content.ReadFromJsonAsync<ResultadoEncuesta>();

                using (var package = new ExcelPackage())
                {
                    var worksheet = package.Workbook.Worksheets.Add("Resultados");

                    // Escribir información adicional
                    worksheet.Cells[1, 1].Value = "Número de Personas:";
                    worksheet.Cells[1, 2].Value = data.numeroDePersonas;
                    worksheet.Cells[2, 1].Value = "Sumatoria Total del Periodo:";
                    worksheet.Cells[2, 2].Value = data.sumatoriaTotalPeriodo;

                    // Escribir encabezados para las preguntas y opciones
                    worksheet.Cells[4, 1].Value = "Pregunta";
                    worksheet.Cells[4, 2].Value = "Opción";
                    worksheet.Cells[4, 3].Value = "Sumatoria";
                    worksheet.Cells[4, 4].Value = "Número de Respuestas";

                    int currentRow = 5;

                    // Iterar sobre cada pregunta y sus opciones
                    foreach (var pregunta in data.sumatoriaPorPregunta)
                    {
                        var textoPregunta = pregunta.texto_pregunta;
                        var opciones = pregunta.sumatoriaPorOpcion;

                        foreach (var opcion in opciones)
                        {
                            worksheet.Cells[currentRow, 1].Value = textoPregunta;
                            worksheet.Cells[currentRow, 2].Value = opcion.texto_opcion;
                            worksheet.Cells[currentRow, 3].Value = opcion.sumatoria;
                            worksheet.Cells[currentRow, 4].Value = opcion.numeroDeRespuestas;
                            currentRow++;
                        }
                    }

                    // Crear la gráfica
                    var chart = worksheet.Drawings.AddChart("chart", OfficeOpenXml.Drawing.Chart.eChartType.ColumnClustered);
                    chart.Title.Text = "Resultados de la Encuesta";
                    chart.SetPosition(currentRow + 2, 0, 1, 0);
                    chart.SetSize(800, 400);

                    // Rango de datos para la gráfica
                    var series = chart.Series.Add(worksheet.Cells[5, 3, currentRow - 1, 3], worksheet.Cells[5, 2, currentRow - 1, 2]);
                    series.Header = "Sumatoria de Opciones";

                    // Ajustar el ancho de las columnas
                    worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();

                    // Guardar el archivo Excel
                    using (var stream = new MemoryStream())
                    {
                        package.SaveAs(stream);
                        var base64 = Convert.ToBase64String(stream.ToArray());
                        await JSRuntime.InvokeVoidAsync("DescargarExel", $"ResultadosEncuesta_{nombreCurso}.xlsx", base64);
                    }
                }
            }
            else
            {
                // Manejo de errores en caso de que la API no responda exitosamente
                Console.WriteLine($"Error en la respuesta: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Manejo de excepciones
            Console.WriteLine($"Excepción: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task OntenerEncuestas(int id_periodo, string nombre_curso)
    {
        isLoading = true;
        StateHasChanged();
        idPeriodoF = id_periodo;
        nombreCurso = nombre_curso;
        try
        {
            encuestas = await Http.GetFromJsonAsync<List<Encuesta>>("http://localhost:5117/api/Encuesta/GetEncuesta");
        }
        catch (Exception ex)
        {
            await sweetAletNotify("Error al obtener las encuestas", "error");
            isLoading = false;
            StateHasChanged();
            return;
        }

        isLoading = false;
        StateHasChanged();
    }

    private async Task sweetAletNotify(string texto, string tipo)//notificacion de alertas
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }
    private void NavigateToEncuestas()
    {
        NavigationManager.NavigateTo("/todas-encuestas");
    }

    public class SumatoriaPorOpcion
    {
        public int id_opcion { get; set; }
        public string texto_opcion { get; set; }
        public int sumatoria { get; set; }
        public int numeroDeRespuestas { get; set; }
    }

    public class SumatoriaPorPregunta
    {
        public int id_pregunta { get; set; }
        public string texto_pregunta { get; set; }
        public int sumatoriaPorPregunta { get; set; }
        public List<SumatoriaPorOpcion> sumatoriaPorOpcion { get; set; }
    }

    public class ResultadoEncuesta
    {
        public int numeroDePersonas { get; set; }
        public int sumatoriaTotalPeriodo { get; set; }
        public List<SumatoriaPorPregunta> sumatoriaPorPregunta { get; set; }
    }


    public class PagedResult<T>
    {
        public List<T> Items { get; set; }
        public int TotalPages { get; set; }
        public int CurrentPage { get; set; }
    }
}

