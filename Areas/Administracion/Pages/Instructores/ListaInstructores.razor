@page "/instructores"
@layout AdminLayout
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<h3>Listado de Instructores</h3>

<!-- Filtro por Curso -->
<div class="form-group">
    <label for="cursoSelect">Filtrar por Curso:</label>
    <select id="cursoSelect" class="form-control" @onchange="OnCursoSeleccionadoChange">
        <option value="">Seleccionar Curso</option>
        @foreach (var curso in cursos)
        {
            <option value="@curso.id_curso">@curso.nombre_curso</option>
        }
    </select>
</div>

@if (selectedCurso != 0)
{
    <!-- Filtro por Periodo -->
    <div class="form-group">
        <label for="periodoSelect">Filtrar por Periodo:</label>
        <select id="periodoSelect" class="form-control" @onchange="OnPeriodoSeleccionadoChange">
            <option value="">Seleccionar Periodo</option>
            @foreach (var periodo in periodosFiltrados)
            {
                <option value="@periodo.id_lista_periodo">@periodo.nombre_periodo</option>
            }
        </select>
    </div>
}

<button class="btn btn-success" @onclick="CrearNuevoInstructor">Añadir Nuevo Instructor</button>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Cédula</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Correo</th>
            <th>Cursos</th>
            <th>Periodos</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @if (instructoresFiltrados.Any())
        {
            @foreach (var instructor in instructoresFiltrados)
            {
                <tr>
                    <td>@instructor.id_instructor</td>
                    <td>@instructor.cedula_usuario</td>
                    <td>@instructor.nombre_usuario</td>
                    <td>@instructor.apellidos_usuario</td>
                    <td>@instructor.correo_usuario</td>
                    <td>@string.Join(", ", instructor.cursos)</td>
                    <td>@string.Join(", ", instructor.periodos)</td>
                    <td>
                        <button class="btn btn-info" @onclick="() => VerDetalles(instructor.id_instructor)">Ver</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmarEliminarInstructor(instructor.id_instructor)">Eliminar</button>
                        <button class="btn btn-warning" @onclick="() => AsignarHoras(instructor.id_instructor)">Asignar Horas</button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="8">No hay instructores disponibles con los filtros seleccionados.</td>
            </tr>
        }
    </tbody>
</table>

<!-- Paginación -->
<div class="pagination-container">
    <button @onclick="PreviousPage" class="btn btn-primary btn-sm" disabled="@(!hasPreviousPage)">Anterior</button>
    <span>Página @currentPage de @totalPages</span>
    <button @onclick="NextPage" class="btn btn-primary btn-sm" disabled="@(!hasNextPage)">Siguiente</button>
</div>

@code {
    private List<InstructorConDetallesCompleto> instructores = new List<InstructorConDetallesCompleto>();
    private List<InstructorConDetallesCompleto> instructoresFiltrados = new List<InstructorConDetallesCompleto>();
    private List<ListaPeriodo> periodos = new List<ListaPeriodo>();
    private List<ListaPeriodo> periodosFiltrados = new List<ListaPeriodo>();
    private List<Curso> cursos = new List<Curso>();
    private int selectedPeriodo = 0;
    private int selectedCurso = 0;
    private string errorMessage;
    private int currentPage = 1;
    private int totalPages;
    private const int pageSize = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadInstructores();
        periodos = await Http.GetFromJsonAsync<List<ListaPeriodo>>("http://localhost:5117/api/ListaPeriodo");
        cursos = await Http.GetFromJsonAsync<List<Curso>>("http://localhost:5117/api/Curso");
    }

    private async Task LoadInstructores()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<PagedResponse<InstructorConDetallesCompleto>>($"http://localhost:5117/api/Instructor/Detalles?pageNumber={currentPage}&pageSize={pageSize}&cursoId={selectedCurso}&periodoId={selectedPeriodo}");
            instructores = response.Items.ToList();
            totalPages = (int)Math.Ceiling((double)response.TotalCount / pageSize);

            instructoresFiltrados = instructores;
        }
        catch (Exception ex)
        {
            await sweetAletNotify($"Error al cargar los datos. Exception: {ex.Message}", "error");
        }
    }

    private async Task OnCursoSeleccionadoChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int cursoId))
        {
            selectedCurso = cursoId;
            await CargarPeriodos(cursoId);
        }
        else
        {
            selectedCurso = 0;
            selectedPeriodo = 0; // Reset periodo filter
            periodosFiltrados = new List<ListaPeriodo>();
            await LoadInstructores();
        }
    }

    private async Task CargarPeriodos(int cursoId)
    {
        try
        {
            periodosFiltrados = await Http.GetFromJsonAsync<List<ListaPeriodo>>($"http://localhost:5117/api/Periodo/por-curso/{cursoId}");
            if (!periodosFiltrados.Any())
            {
                errorMessage = "No se encontraron periodos para el curso seleccionado.";
                await sweetAletNotify(errorMessage, "info");
            }
            else
            {
                errorMessage = string.Empty; // Limpia el mensaje de error si se encontraron periodos
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los periodos: {ex.Message}";
            await sweetAletNotify(errorMessage, "error");
        }

        await LoadInstructores();
    }

    private async Task OnPeriodoSeleccionadoChange(ChangeEventArgs e)
    {
        var selectedValue = e.Value.ToString();
        if (string.IsNullOrEmpty(selectedValue))
        {
            selectedPeriodo = 0;
        }
        else
        {
            selectedPeriodo = int.Parse(selectedValue);
        }

        await LoadInstructores();
    }

    private void VerDetalles(int id)
    {
        NavigationManager.NavigateTo($"/detalle-instructor/{id}");
    }

    private void CrearNuevoInstructor()
    {
        NavigationManager.NavigateTo("/registrar-instructor");
    }

    private async Task ConfirmarEliminarInstructor(int id)
    {
        var confirmed = await sweetAletConfirm("¿Estás seguro de que deseas eliminar este instructor?", "warning");
        if (confirmed)
        {
            await EliminarInstructor(id);
        }
    }

    private async Task EliminarInstructor(int id)
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5117/api/Instructor/{id}");
            if (response.IsSuccessStatusCode)
            {
                instructores.RemoveAll(i => i.id_instructor == id);
                await LoadInstructores();
                await sweetAletNotify("Instructor eliminado exitosamente.", "success");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await sweetAletNotify($"Error al eliminar el instructor. Status Code: {response.StatusCode}, Details: {errorContent}", "error");
            }
        }
        catch (Exception ex)
        {
            await sweetAletNotify($"Error al eliminar el instructor: {ex.Message}", "error");
        }
    }

    private void AsignarHoras(int id)
    {
        NavigationManager.NavigateTo($"/asignar-horas-instructor/{id}");
    }

    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }

    private async Task<bool> sweetAletConfirm(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "No"
        };
        return await JSRuntime.InvokeAsync<bool>("FireSweetAlertConfirm", options);
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadInstructores();
        }
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadInstructores();
        }
    }

    private bool hasPreviousPage => currentPage > 1;
    private bool hasNextPage => currentPage < totalPages;
}
