@page "/instructores"
@inject NavigationManager NavigationManager

<h3>Listado de Instructores</h3>

<div class="form-group">
    <label for="periodoSelect">Filtrar por Periodo:</label>
    <select id="periodoSelect" class="form-control" @onchange="PeriodoChanged">
        <option value="">Seleccionar Periodo</option>
        @foreach (var periodo in periodos)
        {
            <option value="@periodo">@periodo</option>
        }
    </select>
</div>

@if (!string.IsNullOrEmpty(selectedPeriodo))
{
    <div class="form-group">
        <label for="cursoSelect">Filtrar por Curso:</label>
        <select id="cursoSelect" class="form-control" @onchange="CursoChanged">
            <option value="">Seleccionar Curso</option>
            @foreach (var curso in cursosFiltrados)
            {
                <option value="@curso.Id">@curso.Nombre</option>
            }
        </select>
    </div>
}

<button class="btn btn-success" @onclick="() => CrearNuevoInstructor()">Añadir Nuevo Instructor</button>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Correo</th>
            <th>Curso</th>
            <th>Periodo</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var instructor in instructoresFiltrados)
        {
            <tr>
                <td>@instructor.Id</td>
                <td>@instructor.Nombre</td>
                <td>@instructor.Correo</td>
                <td>@instructor.CursoNombre</td>
                <td>@instructor.Periodo</td>
                <td>
                    <button class="btn btn-info" @onclick="() => VerDetalles(instructor.Id)">Ver</button>
                    <button class="btn btn-primary" @onclick="() => EditarInstructor(instructor.Id)">Editar</button>
                    <button class="btn btn-danger" @onclick="() => EliminarInstructor(instructor.Id)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (!instructoresFiltrados.Any())
{
    <p>No hay instructores disponibles con los filtros seleccionados.</p>
}

@code {
    private List<Instructor> instructores = new List<Instructor>();
    private List<Instructor> instructoresFiltrados = new List<Instructor>();
    private List<string> periodos = new List<string> { "2024A", "2024B", "2025A" };
    private List<Curso> cursos = new List<Curso>();
    private List<Curso> cursosFiltrados = new List<Curso>();
    private List<Edicion> ediciones = new List<Edicion>();
    private string selectedPeriodo = "";
    private int selectedCurso = 0;

    protected override void OnInitialized()
    {
        instructores = ObtenerInstructores();
        cursos = ObtenerCursos();
        ediciones = ObtenerEdiciones();
        instructoresFiltrados = instructores;
        cursosFiltrados = cursos;
    }

    private void PeriodoChanged(ChangeEventArgs e)
    {
        selectedPeriodo = e.Value.ToString();
        selectedCurso = 0; // Reset curso filter
        FiltrarCursos();
        FiltrarInstructores();
    }

    private void CursoChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int cursoId))
        {
            selectedCurso = cursoId;
            FiltrarInstructores();
        }
    }

    private void FiltrarCursos()
    {
        if (string.IsNullOrEmpty(selectedPeriodo))
        {
            cursosFiltrados = cursos;
        }
        else
        {
            var cursoIds = ediciones
                .Where(ed => ed.Periodo == selectedPeriodo)
                .Select(ed => ed.CursoId)
                .Distinct()
                .ToList();

            cursosFiltrados = cursos
                .Where(curso => cursoIds.Contains(curso.Id))
                .ToList();
        }
    }

    private void FiltrarInstructores()
    {
        instructoresFiltrados = instructores
            .Where(inst => (string.IsNullOrEmpty(selectedPeriodo) || inst.Periodo == selectedPeriodo) &&
                          (selectedCurso == 0 || inst.CursoId == selectedCurso))
            .ToList();
    }

    private void VerDetalles(int id)
    {
        NavigationManager.NavigateTo($"/detalle-instructor/{id}");
    }

    private void CrearNuevoInstructor()
    {
        NavigationManager.NavigateTo("/crear-instructor");
    }

    private void EditarInstructor(int id)
    {
        NavigationManager.NavigateTo($"/editar-instructor/{id}");
    }

    private void EliminarInstructor(int id)
    {
        instructores.RemoveAll(e => e.Id == id);
        FiltrarInstructores();
    }

    private List<Instructor> ObtenerInstructores()
    {
        // Simulación de datos de instructores
        return new List<Instructor>
        {
            new Instructor { Id = 1, Nombre = "Pedro Sanchez", Correo = "pedro.sanchez@example.com", CursoId = 1, CursoNombre = "Blazor para Principiantes", Periodo = "2024A" },
            new Instructor { Id = 2, Nombre = "Ana Lopez", Correo = "ana.lopez@example.com", CursoId = 2, CursoNombre = "Blazor Avanzado", Periodo = "2024B" }
        };
    }

    private List<Curso> ObtenerCursos()
    {
        // Simulación de datos de cursos
        return new List<Curso>
        {
            new Curso { Id = 1, Nombre = "Blazor para Principiantes" },
            new Curso { Id = 2, Nombre = "Blazor Avanzado" }
        };
    }

    private List<Edicion> ObtenerEdiciones()
    {
        // Simulación de datos de ediciones
        return new List<Edicion>
        {
            new Edicion { Id = 1, CursoId = 1, Periodo = "2024A" },
            new Edicion { Id = 2, CursoId = 2, Periodo = "2024B" },
            new Edicion { Id = 3, CursoId = 1, Periodo = "2025A" }
        };
    }

    public class Instructor
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Correo { get; set; }
        public int CursoId { get; set; }
        public string CursoNombre { get; set; }
        public string Periodo { get; set; }
    }

    public class Curso
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
    }

    public class Edicion
    {
        public int Id { get; set; }
        public int CursoId { get; set; }
        public string Periodo { get; set; }
    }
}
