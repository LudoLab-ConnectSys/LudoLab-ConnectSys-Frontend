@page "/detalle-instructor/{InstructorId:int}"
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (instructor == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <EditForm Model="instructorUpdateModel" OnValidSubmit="ConfirmarGuardarCambios">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <h3>Detalles del Instructor</h3>
            <div class="form-group">
                <label>Nombre:</label>
                <InputText @bind-Value="instructorUpdateModel.nombre_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Apellido:</label>
                <InputText @bind-Value="instructorUpdateModel.apellidos_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Cédula:</label>
                <InputText @bind-Value="instructorUpdateModel.cedula_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Correo:</label>
                <InputText @bind-Value="instructorUpdateModel.correo_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Celular:</label>
                <InputText @bind-Value="instructorUpdateModel.celular_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Teléfono:</label>
                <InputText @bind-Value="instructorUpdateModel.telefono_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Edad:</label>
                <InputNumber @bind-Value="instructorUpdateModel.edad_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Horas Totales Asignadas:</label>
                <InputNumber @bind-Value="horasTotales" class="form-control" readonly />
            </div>

            <button type="submit" class="btn btn-primary">Guardar Cambios</button>
            <button type="button" class="btn btn-danger" @onclick="ConfirmarEliminarInstructor">Eliminar</button>
            <button type="button" class="btn btn-secondary" @onclick="VerCursosInscritos">Ver Cursos Registrados</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int InstructorId { get; set; }

    private InstructorConDetallesCompleto instructor;
    private InstructorUpdateModel instructorUpdateModel;
    private int horasTotales;

    protected override async Task OnInitializedAsync()
    {
        instructor = await Http.GetFromJsonAsync<InstructorConDetallesCompleto>($"http://localhost:5117/api/Instructor/DetallesById/{InstructorId}");
        var horasResponse = await Http.GetAsync($"http://localhost:5117/api/Instructor/{InstructorId}/HorasTotales");

        if (horasResponse.IsSuccessStatusCode)
        {
            var horas = await horasResponse.Content.ReadFromJsonAsync<HorasModel>();
            horasTotales = horas?.horas_ganadas_instructor ?? 0;
        }
        else
        {
            horasTotales = 0;
        }

        instructorUpdateModel = new InstructorUpdateModel
            {
                id_instructor = instructor.id_instructor,
                nombre_usuario = instructor.nombre_usuario,
                apellidos_usuario = instructor.apellidos_usuario,
                cedula_usuario = instructor.cedula_usuario,
                correo_usuario = instructor.correo_usuario,
                celular_usuario = instructor.celular_usuario,
                telefono_usuario = instructor.telefono_usuario,
                edad_usuario = instructor.edad_usuario
            };
    }

    private async Task ConfirmarGuardarCambios()
    {
        var confirmed = await sweetAletConfirm("¿Estás seguro de que deseas guardar los cambios?", "warning");
        if (confirmed)
        {
            await GuardarCambios();
        }
    }

    private async Task GuardarCambios()
    {
        var response = await Http.PutAsJsonAsync($"http://localhost:5117/api/Instructor/{InstructorId}", instructorUpdateModel);
        if (response.IsSuccessStatusCode)
        {
            await sweetAletNotify("Los cambios se guardaron correctamente.", "success");
            NavigationManager.NavigateTo("/instructores");
        }
        else
        {
            await sweetAletNotify("Ocurrió un error al guardar los cambios.", "error");
        }
    }

    private async Task ConfirmarEliminarInstructor()
    {
        var confirmed = await sweetAletConfirm("¿Estás seguro de que deseas eliminar este instructor?", "warning");
        if (confirmed)
        {
            await EliminarInstructor();
        }
    }

    private async Task EliminarInstructor()
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5117/api/Instructor/{InstructorId}");
            if (response.IsSuccessStatusCode)
            {
                await sweetAletNotify("Instructor eliminado exitosamente.", "success");
                NavigationManager.NavigateTo("/instructores");
            }
            else
            {
                await sweetAletNotify("Ocurrió un error al eliminar el instructor.", "error");
            }
        }
        catch (Exception)
        {
            await sweetAletNotify("Ocurrió un error al eliminar el instructor.", "error");
        }
    }

    private void VerCursosInscritos()
    {
        NavigationManager.NavigateTo($"/cursos-inscritos-instructor/{InstructorId}");
    }

    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }

    private async Task<bool> sweetAletConfirm(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "No"
        };
        return await JSRuntime.InvokeAsync<bool>("FireSweetAlertConfirm", options);
    }

    public class HorasModel
    {
        public int id_instructor { get; set; }
        public int horas_ganadas_instructor { get; set; }
    }
}
