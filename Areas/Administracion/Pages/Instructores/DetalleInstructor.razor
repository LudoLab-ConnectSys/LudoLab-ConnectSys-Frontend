@page "/detalle-instructor/{InstructorId:int}"
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Detalles del Instructor</h3>

@if (instructor == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <EditForm Model="instructorUpdateModel" OnValidSubmit="GuardarCambios">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <h4>Información del Instructor</h4>
            <div class="form-group">
                <label>Nombre:</label>
                <InputText @bind-Value="instructorUpdateModel.nombre_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Apellido:</label>
                <InputText @bind-Value="instructorUpdateModel.apellidos_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Cédula:</label>
                <InputText @bind-Value="instructorUpdateModel.cedula_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Correo:</label>
                <InputText @bind-Value="instructorUpdateModel.correo_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Celular:</label>
                <InputText @bind-Value="instructorUpdateModel.celular_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Teléfono:</label>
                <InputText @bind-Value="instructorUpdateModel.telefono_usuario" class="form-control" />
            </div>
            <div class="form-group">
                <label>Edad:</label>
                <InputNumber @bind-Value="instructorUpdateModel.edad_usuario" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Guardar Cambios</button>
            <button type="button" class="btn btn-danger" @onclick="EliminarInstructor">Eliminar</button>
            <button type="button" class="btn btn-secondary" @onclick="VerCursosInscritos">Ver Cursos Inscritos</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int InstructorId { get; set; }

    private InstructorConDetallesCompleto instructor;
    private InstructorUpdateModel instructorUpdateModel;

    protected override async Task OnInitializedAsync()
    {
        instructor = await Http.GetFromJsonAsync<InstructorConDetallesCompleto>($"http://localhost:5117/api/Instructor/DetallesById/{InstructorId}");

        instructorUpdateModel = new InstructorUpdateModel
            {
                id_instructor = instructor.id_instructor,
                nombre_usuario = instructor.nombre_usuario,
                apellidos_usuario = instructor.apellidos_usuario,
                cedula_usuario = instructor.cedula_usuario,
                correo_usuario = instructor.correo_usuario,
                celular_usuario = instructor.celular_usuario,
                telefono_usuario = instructor.telefono_usuario,
                edad_usuario = instructor.edad_usuario
            };
    }

    private async Task GuardarCambios()
    {
        var response = await Http.PutAsJsonAsync($"http://localhost:5117/api/Instructor/{InstructorId}", instructorUpdateModel);
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/instructores");
        }
        else
        {
            // Manejar el error
        }
    }

    private async Task EliminarInstructor()
    {
        var response = await Http.DeleteAsync($"http://localhost:5117/api/Instructor/{InstructorId}");
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/instructores");
        }
        else
        {
            // Manejar el error
        }
    }

    private void VerCursosInscritos()
    {
        NavigationManager.NavigateTo($"/cursos-inscritos-instructor/{InstructorId}");
    }
}