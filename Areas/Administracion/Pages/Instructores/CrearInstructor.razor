@page "/registrar-instructor"
@layout AdminLayout
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime

<h3 class="text-center my-4">Registrar Instructor</h3>

<EditForm Model="@nuevoUsuario" OnValidSubmit="HandleValidSubmit" class="container">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <!-- Datos del Usuario -->
                    <div class="form-group mb-3">
                        <label for="cedula">Cédula:</label>
                        <InputText id="cedula" class="form-control" @bind-Value="nuevoUsuario.cedula_usuario" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="nombre">Nombre:</label>
                        <InputText id="nombre" class="form-control" @bind-Value="nuevoUsuario.nombre_usuario" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="apellidos">Apellidos:</label>
                        <InputText id="apellidos" class="form-control" @bind-Value="nuevoUsuario.apellidos_usuario" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="correo">Correo Electrónico:</label>
                        <InputText id="correo" class="form-control" @bind-Value="nuevoUsuario.correo_usuario" />
                    </div>

                    <!-- Selección de Curso -->
                    <div class="form-group mb-3">
                        <label for="curso">Curso:</label>
                        <select id="curso" class="form-control" @onchange="OnCursoSeleccionadoChange">
                            <option value="">Seleccione un curso</option>
                            @foreach (var curso in cursos)
                            {
                                <option value="@curso.id_curso">@curso.nombre_curso</option>
                            }
                        </select>
                    </div>

                    <!-- Selección de Periodo -->
                    <div class="form-group mb-3">
                        <label for="periodo">Periodo:</label>
                        <InputSelect id="periodo" class="form-control" @bind-Value="idPeriodoSeleccionado">
                            <option value="">Seleccione un periodo</option>
                            @foreach (var periodo in periodosUnicos)
                            {
                                <option value="@periodo.id_periodo">@periodo.nombre_periodo</option>
                            }
                        </InputSelect>
                    </div>
                </div>
                <div class="card-footer text-center">
                    <button type="submit" class="btn btn-success me-2">Guardar y Registrar</button>
                    <button type="button" class="btn btn-secondary" @onclick="Regresar">Cancelar</button>
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-2">@errorMessage</div>
                    }
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private DirectorioDeArchivos.Shared.Usuario nuevoUsuario = new DirectorioDeArchivos.Shared.Usuario();
    private int idCursoSeleccionado;
    private int idPeriodoSeleccionado;
    private List<Curso> cursos = new List<Curso>();
    private List<PeriodoConNombre> periodosUnicos = new List<PeriodoConNombre>();
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await CargarCursos();
    }

    private async Task CargarCursos()
    {
        try
        {
            cursos = await Http.GetFromJsonAsync<List<Curso>>("http://localhost:5117/api/Curso");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los cursos: {ex.Message}";
        }
    }

    private async Task OnCursoSeleccionadoChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int cursoId))
        {
            idCursoSeleccionado = cursoId;
            await CargarPeriodos(cursoId);
        }
    }

    private async Task CargarPeriodos(int cursoId)
    {
        try
        {
            periodosUnicos = await Http.GetFromJsonAsync<List<PeriodoConNombre>>($"http://localhost:5117/api/Periodo/por-curso/{cursoId}");
            if (!periodosUnicos.Any())
            {
                errorMessage = "No se encontraron periodos para el curso seleccionado.";
            }
            else
            {
                errorMessage = string.Empty; // Limpia el mensaje de error si se encontraron periodos
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los periodos: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var usuarioId = await GuardarUsuario();
            var instructorId = await GuardarInstructor(usuarioId);
            await RegistrarInstructor(instructorId, idCursoSeleccionado, idPeriodoSeleccionado);

            await sweetAletNotify("Instructor registrado exitosamente", "success");

            NavigationManager.NavigateTo("/instructores");
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Error: {ex.Message}";
            await sweetAletNotify($"Error: {ex.Message}", "error");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            await sweetAletNotify($"Error: {ex.Message}", "error");
        }
    }

    private async Task<int> GuardarUsuario()
    {
        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/Usuario", nuevoUsuario);
        response.EnsureSuccessStatusCode();
        var usuarioCreado = await response.Content.ReadFromJsonAsync<DirectorioDeArchivos.Shared.Usuario>();
        return usuarioCreado.id_usuario;
    }

    private async Task<int> GuardarInstructor(int usuarioId)
    {
        var nuevoInstructor = new DirectorioDeArchivos.Shared.Instructor
            {
                id_usuario = usuarioId
            };

        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/Instructor", nuevoInstructor);
        response.EnsureSuccessStatusCode();
        var instructorCreado = await response.Content.ReadFromJsonAsync<DirectorioDeArchivos.Shared.Instructor>();
        return instructorCreado.id_instructor;
    }

    private async Task RegistrarInstructor(int instructorId, int cursoId, int periodoId)
    {
        var nuevoRegistroInstructor = new DirectorioDeArchivos.Shared.RegistroInstructor
            {
                id_instructor = instructorId,
                id_curso = cursoId,
                id_periodo = periodoId,
                fecha_registro = DateTime.Now
            };

        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/RegistroInstructor", nuevoRegistroInstructor);
        response.EnsureSuccessStatusCode();
    }

    private void Regresar()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }
}
