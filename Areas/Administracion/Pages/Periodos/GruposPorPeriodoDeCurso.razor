@page "/periodos/{PeriodoId:int}/grupos"
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Grupos del Periodo: @nombrePeriodo</h3>
<h4>Curso: @nombreCurso</h4>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Grupo</th>
            <th>Instructor</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var grupo in grupos)
        {
            <tr>
                <td>@grupo.id_grupo</td>
                <td>@grupo.nombre_grupo</td>
                <td>@grupo.nombre_instructor</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => VerGrupo(grupo.id_grupo)">Ver Grupo</button>
                    <button class="btn btn-info" @onclick="() => Editar(grupo.id_grupo)">Actualizar</button>
                    <button class="btn btn-danger" @onclick="() => ConfirmarEliminarGrupo(grupo.id_grupo)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (!grupos.Any())
{
    <p>No hay grupos disponibles para este periodo.</p>
}

@code {
    [Parameter]
    public int PeriodoId { get; set; }

    private List<GrupoConDetalles> grupos = new List<GrupoConDetalles>();
    private string nombrePeriodo;
    private string nombreCurso;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var periodoResponse = await Http.GetFromJsonAsync<PeriodoConNombreCurso>($"http://localhost:5117/api/Periodo/detalles-con-curso/{PeriodoId}");
            if (periodoResponse != null)
            {
                nombrePeriodo = periodoResponse.nombre_periodo;
                nombreCurso = periodoResponse.nombre_curso;
            }

            grupos = await Http.GetFromJsonAsync<List<GrupoConDetalles>>($"http://localhost:5117/api/Grupo/Periodo/{PeriodoId}/Grupos");
        }
        catch (Exception ex)
        {
            await MostrarNotificacion($"Error al cargar los datos: {ex.Message}", "error");
        }
    }

    private void Editar(int id_grupo)
    {
        NavigationManager.NavigateTo($"/grupo/{id_grupo}/detalles");
    }

    private void VerGrupo(int id_grupo)
    {
        NavigationManager.NavigateTo($"/grupo/{id_grupo}/estudiantes");
    }

    private async Task ConfirmarEliminarGrupo(int id_grupo)
    {
        var confirmed = await MostrarConfirmacion("¿Estás seguro de que deseas eliminar este grupo?", "warning");
        if (confirmed)
        {
            await EliminarGrupo(id_grupo);
        }
    }

    private async Task EliminarGrupo(int id_grupo)
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5117/api/Grupo/{id_grupo}");
            if (response.IsSuccessStatusCode)
            {
                grupos.RemoveAll(g => g.id_grupo == id_grupo);
                await MostrarNotificacion("Grupo eliminado exitosamente.", "success");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                await MostrarNotificacion($"Error al eliminar el grupo. Status Code: {response.StatusCode}, Details: {errorContent}", "error");
            }
        }
        catch (Exception ex)
        {
            await MostrarNotificacion($"Error al eliminar el grupo. Exception: {ex.Message}", "error");
        }
    }

    private async Task MostrarNotificacion(string mensaje, string tipo)
    {
        var options = new
        {
            Title = mensaje,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }

    private async Task<bool> MostrarConfirmacion(string mensaje, string tipo)
    {
        var options = new
        {
            Title = mensaje,
            Icon = tipo,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "No"
        };
        return await JSRuntime.InvokeAsync<bool>("FireSweetAlertConfirm", options);
    }
}
