@page "/cursos/{CursoId:int}/periodos-curso"
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Periodos del Curso: @cursoNombre</h3>

<button class="btn btn-success" @onclick="CrearNuevoPeriodo">Crear Nuevo Periodo</button>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Fecha de Inicio</th>
            <th>Fecha de Fin</th>
            <th>Horas</th>
            <th>Nombre del Periodo</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var periodo in periodos)
        {
            <tr>
                <td>@periodo.id_periodo</td>
                <td>@periodo.fecha_inicio_periodo</td>
                <td>@periodo.fecha_fin_periodo</td>
                <td>@periodo.duracion_periodo_horas</td>
                <td>@listaPeriodos.FirstOrDefault(lp => lp.id_lista_periodo == periodo.id_ListaPeriodo)?.nombre_periodo</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => EditarPeriodo(periodo.id_periodo)">Editar</button>
                    <button class="btn btn-danger" @onclick="() => ConfirmarEliminarPeriodo(periodo.id_periodo)">Eliminar</button>
                    <button class="btn btn-info" @onclick="() => VerGrupos(periodo.id_periodo)">Ver Grupos</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (!periodos.Any())
{
    <p>No hay periodos disponibles para este curso. ¿Desea <a href="crear-periodo">crear un nuevo periodo</a>?</p>
}

@code {
    [Parameter]
    public int CursoId { get; set; }

    private List<Periodo> periodos = new List<Periodo>();
    private List<ListaPeriodo> listaPeriodos = new List<ListaPeriodo>();
    private string cursoNombre;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            periodos = await Http.GetFromJsonAsync<List<Periodo>>($"http://localhost:5117/api/Periodo/Curso/{CursoId}");
            listaPeriodos = await Http.GetFromJsonAsync<List<ListaPeriodo>>("http://localhost:5117/api/ListaPeriodo");
            cursoNombre = await Http.GetStringAsync($"http://localhost:5117/api/Curso/{CursoId}/Nombre");
        }
        catch (Exception ex)
        {
            await MostrarNotificacion("Error al cargar los datos.", "error");
        }
    }

    private void CrearNuevoPeriodo()
    {
        NavigationManager.NavigateTo($"/crear-periodo/{CursoId}");
    }

    private void EditarPeriodo(int id_periodo)
    {
        NavigationManager.NavigateTo($"/editar-periodo/{id_periodo}");
    }

    private async Task ConfirmarEliminarPeriodo(int id_periodo)
    {
        var confirmed = await MostrarConfirmacion("¿Estás seguro de que deseas eliminar este periodo? No se puede eliminar un periodo con registros existentes.", "warning");
        if (confirmed)
        {
            await EliminarPeriodo(id_periodo);
        }
    }

    private async Task EliminarPeriodo(int id_periodo)
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5117/api/Periodo/{id_periodo}");
            if (response.IsSuccessStatusCode)
            {
                periodos.RemoveAll(p => p.id_periodo == id_periodo);
                await MostrarNotificacion("Periodo eliminado exitosamente.", "success");
            }
            else
            {
                await MostrarNotificacion("No se pudo eliminar el periodo. Verifique si hay registros asociados.", "error");
            }
        }
        catch (Exception ex)
        {
            await MostrarNotificacion("Error de servidor al intentar eliminar el periodo.", "error");
        }
    }

    private void VerGrupos(int id_periodo)
    {
        NavigationManager.NavigateTo($"/periodos/{id_periodo}/grupos");
    }

    private async Task MostrarNotificacion(string mensaje, string tipo)
    {
        var options = new
        {
            Title = mensaje,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }

    private async Task<bool> MostrarConfirmacion(string mensaje, string tipo)
    {
        var options = new
        {
            Title = mensaje,
            Icon = tipo,
            ShowCancelButton = true,
            ConfirmButtonText = "Sí",
            CancelButtonText = "No"
        };
        return await JSRuntime.InvokeAsync<bool>("FireSweetAlertConfirm", options);
    }
}
