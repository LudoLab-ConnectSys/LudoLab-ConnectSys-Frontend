@page "/crear-curso"
@layout AdminLayout
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject SweetAlertService Swal
@inject IJSRuntime JSRuntime

<h3>Crear Nuevo Curso</h3>

<EditForm Model="nuevoCurso" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="nombre">Nombre del curso:</label>
        <InputText id="nombre" class="form-control" @bind-Value="nuevoCurso.nombre_curso" />
    </div>
    <div class="form-group">
        <label for="tipo">Tipo del curso:</label>
        <InputText id="tipo" class="form-control" @bind-Value="nuevoCurso.tipo_curso" />
    </div>
    <div class="form-group">
        <label for="horas">Horas del curso:</label>
        <InputNumber id="horas" class="form-control" @bind-Value="nuevoCurso.horas" />
    </div>
    <div class="form-group">
        <label for="modalidad">Modalidad:</label>
        <InputSelect id="modalidad" class="form-control" @bind-Value="nuevoCurso.Modalidad_id_modalidad">
            <option value="">Seleccione una modalidad</option>
            @foreach (var modalidad in modalidades)
            {
                <option value="@modalidad.id_modalidad">@modalidad.nombre_modalidad</option>
            }
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-success">Crear Curso</button>
</EditForm>

@if (cursoCreado)
{
    <p class="text-success">Curso creado con éxito!</p>
}

@code {
    private Curso nuevoCurso = new Curso();
    private bool cursoCreado = false;
    private List<Modalidad> modalidades = new List<Modalidad>();

    protected override async Task OnInitializedAsync()
    {
        modalidades = await Http.GetFromJsonAsync<List<Modalidad>>("http://localhost:5117/api/Modalidad");
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("http://localhost:5117/api/Curso", nuevoCurso);
        if (response.IsSuccessStatusCode)
        {
            cursoCreado = true;
            nuevoCurso = new Curso(); // Reiniciar el formulario

            await sweetAletNotify("Curso creado con éxito", "success");

            NavigationManager.NavigateTo("/cursos");
        }
        else
        {
            // Manejar el error
            await sweetAletNotify("Error al crear el curso", "error");
        }
    }

    private async Task sweetAletNotify(string texto, string tipo)
    {
        var options = new
        {
            Title = texto,
            Icon = tipo,
            ConfirmButtonText = "OK"
        };
        await JSRuntime.InvokeVoidAsync("FireSweetAlert", options);
    }
}
