@page "/cursos"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Cursos Disponibles</h3>

<button class="btn btn-success" @onclick="CrearNuevoCurso">Crear Nuevo Curso</button>

<table class="table">
    <thead>
        <tr>
            <th>ID</th>
            <th>Nombre</th>
            <th>Tipo</th>
            <th>Horas</th>
            <th>Modalidad</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var curso in cursos)
        {
            <tr>
                <td>@curso.id_curso</td>
                <td>@curso.nombre_curso</td>
                <td>@curso.tipo_curso</td>
                <td>@curso.horas</td>
                <td>@modalidades.FirstOrDefault(m => m.id_modalidad == curso.Modalidad_id_modalidad)?.nombre_modalidad</td>
                <td>
                    <button class="btn btn-info" @onclick="() => VerPeriodos(curso.id_curso)">Ver Periodos</button>
                    <button class="btn btn-primary" @onclick="() => EditarCurso(curso.id_curso)">Editar</button>
                    <button class="btn btn-danger" @onclick="() => EliminarCurso(curso.id_curso)">Eliminar</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (!cursos.Any())
{
    <p>No hay cursos disponibles. ¿Desea <a href="crear-curso">crear un nuevo curso</a>?</p>
}

@code {
    private List<Curso> cursos = new List<Curso>();
    private List<Modalidad> modalidades = new List<Modalidad>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cursos = await Http.GetFromJsonAsync<List<Curso>>("http://localhost:5117/api/Curso");
            modalidades = await Http.GetFromJsonAsync<List<Modalidad>>("http://localhost:5117/api/Modalidad");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private void CrearNuevoCurso()
    {
        NavigationManager.NavigateTo("/crear-curso");
    }

    private void VerPeriodos(int id_curso)
    {
        NavigationManager.NavigateTo($"/cursos/{id_curso}/periodos-curso");
    }

    private void EditarCurso(int id_curso)
    {
        NavigationManager.NavigateTo($"/editar-curso/{id_curso}");
    }

    private async Task EliminarCurso(int id_curso)
    {
        var response = await Http.DeleteAsync($"http://localhost:5117/api/Curso/{id_curso}");
        if (response.IsSuccessStatusCode)
        {
            cursos.RemoveAll(c => c.id_curso == id_curso);
        }
    }
}
